<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo</title>
    <url>/post/b132932/</url>
    <content><![CDATA[<p> Hexo博客是一个基于Nodejs开发的一套博客系统。借助Hexo，开发者可以把自己的Hexo配置和Markdown文章，编译为HTML、JavaScript、CSS的存静态资源。 </p>
<p>本篇主要为为使用 Hexo 博客的一些心得</p>
<h1 id="教程链接"><a href="#教程链接" class="headerlink" title="教程链接"></a>教程链接</h1><ul>
<li><strong>搭建教程：</strong> <a href="https://zhuanlan.zhihu.com/p/606083588">hexo&amp;github 搭建博客（保姆级） - 知乎 (zhihu.com)</a> </li>
<li><strong>博客配置：</strong> <a href="https://zhuanlan.zhihu.com/p/618864711">Hexo+Next主题搭建个人博客+优化全过程（完整详细版） - 知乎 (zhihu.com)</a> </li>
<li><strong>NexT主题配置：</strong> <ul>
<li><a href="https://www.jianshu.com/p/3a05351a37dc">Hexo的Next主题详细配置 - 简书 (jianshu.com)</a> </li>
<li><a href="https://www.jianshu.com/p/cb58558ba222">Hexo+NexT（四）：Hexo站点及Next主题配置详解 - 简书 (jianshu.com)</a></li>
</ul>
</li>
<li><strong>官方文档：</strong> <a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹 | Hexo</a></li>
</ul>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先需要下载NodeJS（如果是部署到github.io主页的话还要下载Git）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化一个博客项目（是在当前目录生成，所以你要确保当前目录是你想防止博客项目的目录）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注：my-blog 需要替换成你的博客名</span></span><br><span class="line">hexo init my-blog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目文件夹</span></span><br><span class="line">cd my-blog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目下载npm依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">本地部署hexo博客</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后你就可以访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 看到你的博客了 🤩🤩</p>
<h2 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h2><p>你需要在github或其他地方找到喜欢的博客主题，把主题的所有文件下载下来并解压到上面创建的项目中的themes文件夹（即 **my-blog&#x2F;themes&#x2F;**）并复制主题文件夹名</p>
<p>然后，在<strong>my-blog&#x2F;_config.yml</strong>（项目根配置文件）中，按<kbd>Ctrl</kbd>+<kbd>F</kbd>搜索 theme</p>
<p>将 theme: xxxx 改为 theme: [上面复制的文件夹名]</p>
<h2 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h2><p>如果你是想部署在github.io上的话，我默认你已经安装了git并且创建github账号了（如果不是的话可以上网搜一下教程）</p>
<p>首先在github上创建一个<strong>公共仓库</strong>，取名为 [github用户名].github.io，然后复制该仓库的仓库链接</p>
<p>在博客项目的项目根配置文件中滑到最底部，可以看到deploy字段</p>
<p>把deploy字段改为如图形式</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">仓库链接</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">仓库分支名</span></span><br></pre></td></tr></table></figure>

<p>最后，在命令行中输入 <code>hexo g -d</code> 就可以把博客项目推到仓库了 🤗🤗</p>
<h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="新建笔记"><a href="#新建笔记" class="headerlink" title="新建笔记"></a>新建笔记</h2><p>其实不需要在命令行里每次都 hexo new xxx。直接在 [项目路径]\source\_posts 下创md文件，然后在开头加上：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```</span></span><br><span class="line"><span class="code">title: xxxx</span></span><br><span class="line"><span class="code">date: yyyy-MM-dd hh:mm:ss*日期格式*</span></span><br><span class="line"><span class="code">tags: </span></span><br><span class="line"><span class="code">*多个标签要用下面这种方式或者 [tag1,tag2] 的方式分隔 要不然就会把所有标签识别成一个标签*</span></span><br><span class="line"><span class="code">- tag1</span></span><br><span class="line"><span class="code">- tag2</span></span><br><span class="line"><span class="code">...</span></span><br><span class="line"><span class="code">categories: xxx *分类不知道能不能写多个，反正我写就写了一个*</span></span><br><span class="line"><span class="code">mathjax: true *如果文章里有数学公式 要把这个填为true*</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>其实就和 new 一个文章一样的</p>
<h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><h3 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h3><p>在b站一个视频看到的主题，黑白配色，感觉还不错 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p>
<p>在主题文件夹中的**_config.yml<strong>配置文件（不是项目根配置文件）中编辑 <strong>scheme</strong> 字段可以改变NexT博客的排版主题（我现在用的排版主题是</strong>Gemini**，在左侧会有侧边栏）</p>
<p>关于NexT主题其他的一些配置可以看<a href="#%E6%95%99%E7%A8%8B%E9%93%BE%E6%8E%A5">这里链接</a>的教程</p>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><p>可以根据标题和内容搜索文章，但是初次使用要加载一段时间（索引文章的标题和内容之类的）</p>
<p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure>

<p>然后在项目根配置文件里加上：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span> <span class="comment"># 好像是分页限制的文章数？</span></span><br></pre></td></tr></table></figure>

<h2 id="文章缩略显示"><a href="#文章缩略显示" class="headerlink" title="文章缩略显示"></a>文章缩略显示</h2><p>网上有好几种实现方法，我这里列举两种：</p>
<ol>
<li><p>在md文件里要缩略的地方加上</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装 hexo-excerpt 自动在指定位置缩略显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-excerpt --save</span><br></pre></td></tr></table></figure>

<p>然后在项目根配置文件里加上：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">excerpt:</span></span><br><span class="line">  <span class="attr">depth:</span> <span class="number">2</span> <span class="comment"># 大致是显示的行数，如果文章开头就是代码块会显示完整代码块</span></span><br><span class="line">  <span class="attr">excerpt_excludes:</span> [] </span><br><span class="line">  <span class="attr">more_excludes:</span> []</span><br><span class="line">  <span class="attr">hideWholePostExcerpts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="背景蜘蛛网特效"><a href="#背景蜘蛛网特效" class="headerlink" title="背景蜘蛛网特效"></a>背景蜘蛛网特效</h2><blockquote>
<p>注意：我用的是NexT主题，其他主题可能需要另搜</p>
</blockquote>
<p>在 [项目路径]\themes\hexo-theme-next\layout\_layout.njk 里加上如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> theme.<span class="property">canvas_nest</span> %&#125;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>然后在主题配置文件里加上：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h2 id="Markdown渲染引擎"><a href="#Markdown渲染引擎" class="headerlink" title="Markdown渲染引擎"></a>Markdown渲染引擎</h2><p>我看网上好多都说Hexo自带的 hexo-renderer-marked 引擎性能不太行，而且不支持一些像emoji、LaTeX公式之类的Markdown语法。<del>所以我就换成了 hexo-renderer-markdown-it</del>  NexT主题如果把引擎换成markdown-it或者markdown-it-plus会导致文章一级目录跳转不了，只能含泪换回原来的marked <span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">&#x1f62d;</span><span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">&#x1f62d;</span><br>emoji的问题可以看 <a href="#%E6%98%BE%E7%A4%BAEmoji">Emoji</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">换之前要把原来的引擎卸载</span></span><br><span class="line">npm uninstall hexo-renderer-marked --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装新引擎</span></span><br><span class="line">npm install hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure>

<p>安装完好像是不用配置什么就能用，但是不加插件还是显示不了emoji的 <span class="github-emoji" alias="angry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8">&#x1f620;</span> ，在项目根配置文件里加上：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br></pre></td></tr></table></figure>

<p>用不用另外安装依赖我也忘了 <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span> ，如果没效果的话就上网搜一搜吧</p>
<h2 id="显示Emoji"><a href="#显示Emoji" class="headerlink" title="显示Emoji"></a>显示Emoji</h2><p>安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-filter-emoji --save</span><br></pre></td></tr></table></figure>

<p>在项目根配置文件中添加：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">emoji:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></table></figure>

<h2 id="更改字体"><a href="#更改字体" class="headerlink" title="更改字体"></a>更改字体</h2><p>谷歌字体一直进不去，啊米诺斯</p>
<h2 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h2><h3 id="Mathjax"><a href="#Mathjax" class="headerlink" title="Mathjax"></a>Mathjax</h3><p>我用是Mathjax。但是Mathjax有个问题是显示不了 $\infin$ （如果你看到了的话说明能显示了），在主题配置文件里找到：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># 是否每页都使用mathjax渲染 填false的话就要在需要渲染的文章开头加上mathjax: true</span></span><br><span class="line">  <span class="attr">every_page:</span> <span class="literal">false</span> </span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 这个改成true</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">all</span> <span class="comment"># 这个好像是显示公式的序号什么的</span></span><br></pre></td></tr></table></figure>

<p>呃呃，也是忘了要不要安装依赖 <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span><span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span></p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在主题配置文件找到 **codeblock ** 字段</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># All available themes: https://theme-next.js.org/highlight/</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">base16/one-light</span>	<span class="comment"># 这个主题夜间模式也能看清</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">stackoverflow-dark</span></span><br><span class="line">  <span class="attr">prism:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">prism</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">prism-dark</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 启用复制按钮</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">flat</span>		<span class="comment"># 复制按钮的样式 mac主题整个代码块样式都会改</span></span><br><span class="line">  <span class="comment"># Fold code block</span></span><br><span class="line">  <span class="attr">fold:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 启用代码折叠</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">400</span>		<span class="comment"># 代码折叠的高度 单位应该是px</span></span><br></pre></td></tr></table></figure>

<h2 id="标签云"><a href="#标签云" class="headerlink" title="标签云"></a>标签云</h2><p>在项目根配置文件搜 <strong>tag_cloud</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_cloud:</span></span><br><span class="line">  <span class="attr">textColor:</span> <span class="string">&#x27;#fc6423&#x27;</span>	<span class="comment"># 词云的文字颜色 </span></span><br><span class="line">  <span class="attr">outlineColor:</span> <span class="string">&#x27;#fff&#x27;</span>	<span class="comment"># 鼠标停留在文字时的背景颜色</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>经验</tag>
      </tags>
  </entry>
  <entry>
    <title>KMP字符串匹配</title>
    <url>/post/9f09feea/</url>
    <content><![CDATA[<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><p>顾名思义，就是用来寻找一个源字符串中有没有和目标字符串匹配的一种算法</p>
<p>后文将源字符串简称为<strong>源串</strong>，目标字符串简称为<strong>目标串</strong></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><blockquote>
<p>前置知识是暴力匹配字符串，如果不知道暴力匹配是怎么匹配的可以去查一下，这里不做重点</p>
</blockquote>
<p>依旧是与传统暴力匹配同样的模式（两个指针遍历字符串）来进行匹配。但与之不同的是，在遇到不匹配的情况时暴力匹配会<strong>直接回溯到最开始与目标串第二个字符对应的下标位置</strong></p>
<p>而KMP算法则是<strong>在匹配前先遍历源串生成一个 next 数组存储不匹配时目标串指针下一步跳转的位置</strong>，使得目标串指针能跳过<strong>尽可能多的 无意义的</strong>字符。大幅提升了匹配的效率</p>
<p>这里的无意义指的是即使匹配了也没有办法让目标串指针向右移动（匹配比原来更多的目标串字符）</p>
<h2 id="next-数组"><a href="#next-数组" class="headerlink" title="next 数组"></a>next 数组</h2><p>由上可知，KMP 最重要的部分就是 next 数组，所以 <strong>理解和生成 next 数组</strong> 也就成了最关键的部分</p>
<p>在此之前，我们需要引入一些概念来方便我们理解生成的过程</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="前后缀"><a href="#前后缀" class="headerlink" title="前后缀"></a>前后缀</h4><p>很好理解，就是从字符串最前面或最后面，<strong>向反方向截取 $n(n&lt;字符串长度)$ 个字符</strong> 获得到的子字符串</p>
<p>例：abc</p>
<ul>
<li><p>前：a，ab</p>
</li>
<li><p>后：c，bc</p>
</li>
</ul>
<h4 id="最长相等前后缀"><a href="#最长相等前后缀" class="headerlink" title="最长相等前后缀"></a>最长相等前后缀</h4><p>也很好理解，就是一个字符串的 <strong>最长的 相同的</strong> 前后缀</p>
<p>例：abcba</p>
<ul>
<li>前：a，ab，<strong>abc</strong>，abcb</li>
<li>后：a，ab，<strong>abc</strong>，abcb</li>
</ul>
<p>加粗的是符合定义的前后缀，其长度为 3</p>
<h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>在暴力匹配中，我们回溯是因为害怕匹配过的字符中存在<strong>与目标串的一个前缀相同的子字符串</strong>，但我们不知道其位置，所以就索性回溯到最初起点的下一位</p>
<p>但是当我们了解了上面的概念之后就可以分析出，当两个指针不匹配时，对于目标串指针匹配过的字符，若其最长前后缀的长度为 $n$ ，则说明我们可以把<strong>已匹配的字符的最长相等前缀与后缀</strong>进行对应</p>
<p>举个例子：</p>
<p>在 abababad 中找 abad 时，当匹配到 aba<strong>b</strong> 时会进行回溯。aba 我们已经匹配过了，它的最长相等前后缀长度为 1</p>
<p>那么在回溯时我们就只需要把第一位回溯到 ab<strong>a</strong>babad 中的加粗位置就可以了，不必担心略过了一些重要的字符</p>
<p>所以我们就很好理解了，next 中只需要存储<strong>当前下标之前的子字符串</strong>的最大相等前后缀长度就可以了</p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><blockquote>
<p>$next[i]$ 的意义是：目标串指针在 $i-1$ 下标位置需要回溯时下一步跳转到的<strong>目标串下标位置</strong></p>
<p>其中 $next[0]$ 初始化为 -1</p>
</blockquote>
<p>KMP 算法也是使用双指针（前缀指针 $j$ 和后缀指针 $i$）来生成 next 数组，当两个指针不相等时 $j$ 回溯到 $next[j]$ 位置（这一步可以理解把目标串分成前缀和后缀，<strong>在后缀中搜索前缀不匹配时进行回溯</strong>）</p>
<p>其中 $j$ 要初始化为 -1，$i$ 要初始化为 0。因为要保证 $j$ 和 $i$ 分别遍历前后缀，而只有长度大于 1 的字符串才有前后缀，这样初始化能保证 $i$ 和 $j$ 的差值至少为 1（下标从 $i$ 到 $j$ 的字符串肯定有前后缀）</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><ul>
<li><p>ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35 中找 e65rhbg4</p>
<p>返回 31</p>
</li>
<li><p>s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb 中找 abc</p>
<p>返回 -1</p>
</li>
</ul>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_next</span><span class="params">(<span class="type">int</span> *next,string tar,<span class="type">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*next=<span class="number">-1</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">j</span><span class="params">(<span class="number">-1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;len)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span>||tar[i]==tar[j])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(++i&gt;=len)</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			*(next+i)=++j;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			j=next[j];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kmp_match</span><span class="params">(string org,string tar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">j</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">olen</span><span class="params">(org.size())</span>,<span class="title">tlen</span><span class="params">(tar.size())</span>,next[tlen]</span>;</span><br><span class="line">	<span class="built_in">get_next</span>(next,tar,tlen);</span><br><span class="line">	<span class="keyword">while</span>(j&lt;tlen&amp;&amp;i&lt;olen)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(j==<span class="number">-1</span>||org[i]==tar[j])</span><br><span class="line">			i++,j++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			j=next[j];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> j&gt;=tlen?i-j:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 31</span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">kmp_match</span>(<span class="string">&quot;ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35&quot;</span>,<span class="string">&quot;e65rhbg4&quot;</span>)&lt;&lt;endl;</span><br><span class="line">    <span class="comment">// -1</span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">kmp_match</span>(<span class="string">&quot;s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb&quot;</span>,<span class="string">&quot;abc&quot;</span>)&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liosq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> 2024/3/17 16:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KMP</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] getNext(String target, <span class="type">int</span> len) &#123;</span><br><span class="line">        <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || target.charAt(i) == target.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (++i &gt;= len) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                next[i] = ++j;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">KMPMatch</span><span class="params">(String origin, String target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">targetLen</span> <span class="operator">=</span> target.length(), originLen = origin.length(), i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] next = getNext(target, targetLen);</span><br><span class="line">        <span class="keyword">while</span> (j &lt; targetLen &amp;&amp; i &lt; originLen) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j == -<span class="number">1</span> || origin.charAt(i) == target.charAt(j)) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                j = next[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> j &gt;= targetLen ? i - j : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 31</span></span><br><span class="line">        System.out.println(KMPMatch(<span class="string">&quot;ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35&quot;</span>, <span class="string">&quot;e65rhbg4&quot;</span>));</span><br><span class="line">        <span class="comment">// -1</span></span><br><span class="line">        System.out.println(KMPMatch(<span class="string">&quot;s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb&quot;</span>, <span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getNext</span>(<span class="params">target, len</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = -<span class="number">1</span>,</span><br><span class="line">        next = <span class="keyword">new</span> <span class="title class_">Array</span>(len)</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j === -<span class="number">1</span> || target[i] === target[j]) &#123;</span><br><span class="line">            next[++i] = ++j</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">KMPMatch</span>(<span class="params">origin, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        j = <span class="number">0</span>,</span><br><span class="line">        oLen = origin.<span class="property">length</span>,</span><br><span class="line">        tLen = target.<span class="property">length</span>,</span><br><span class="line">        next = <span class="title function_">getNext</span>(target, tLen)</span><br><span class="line">    <span class="keyword">while</span> (j &lt; tLen &amp;&amp; i &lt; oLen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (j === -<span class="number">1</span> || origin[i] === target[j]) &#123;</span><br><span class="line">            i++</span><br><span class="line">            j++</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> j &gt;= tLen ? i - j : -<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 31</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">KMPMatch</span>(<span class="string">&quot;ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35&quot;</span>, <span class="string">&quot;e65rhbg4&quot;</span>))</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">KMPMatch</span>(<span class="string">&quot;s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb&quot;</span>, <span class="string">&quot;abc&quot;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_next</span>(<span class="params">target: <span class="built_in">str</span>, <span class="built_in">len</span>: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="built_in">next</span> = [-<span class="number">1</span>]</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="built_in">len</span>:</span><br><span class="line">        <span class="keyword">if</span> j == -<span class="number">1</span> <span class="keyword">or</span> target[i] == target[j]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">            <span class="built_in">next</span>.append(j)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = <span class="built_in">next</span>[j]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">next</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">kmp_match</span>(<span class="params">origin: <span class="built_in">str</span>, target: <span class="built_in">str</span></span>):</span><br><span class="line">    origin_len = <span class="built_in">len</span>(origin)</span><br><span class="line">    target_len = <span class="built_in">len</span>(target)</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="built_in">next</span> = get_next(target, target_len)</span><br><span class="line">    <span class="keyword">while</span> j &lt; target_len <span class="keyword">and</span> i &lt; origin_len:</span><br><span class="line">        <span class="keyword">if</span> j == -<span class="number">1</span> <span class="keyword">or</span> origin[i] == target[j]:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j = <span class="built_in">next</span>[j]</span><br><span class="line">    <span class="keyword">return</span> i - j <span class="keyword">if</span> j &gt;= target_len <span class="keyword">else</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(kmp_match(<span class="string">&#x27;ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35&#x27;</span>, <span class="string">&#x27;e65rhbg4&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(kmp_match(<span class="string">&#x27;s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getNext</span><span class="params">(next []<span class="type">int</span>, target <span class="type">string</span>, <span class="built_in">len</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	next[<span class="number">0</span>] = <span class="number">-1</span></span><br><span class="line">	j := <span class="number">-1</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>; &#123;</span><br><span class="line">		<span class="keyword">if</span> j == <span class="number">-1</span> || target[i] == target[j] &#123;</span><br><span class="line">			i++</span><br><span class="line">			j++</span><br><span class="line">			<span class="keyword">if</span> i &gt;= <span class="built_in">len</span> &#123;</span><br><span class="line">				<span class="keyword">break</span></span><br><span class="line">			&#125;</span><br><span class="line">			next[i] = j</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			j = next[j]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">KMPMatch</span><span class="params">(origin <span class="type">string</span>, target <span class="type">string</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	j := <span class="number">0</span></span><br><span class="line">	oLen := <span class="built_in">len</span>(origin)</span><br><span class="line">	tLen := <span class="built_in">len</span>(target)</span><br><span class="line">	next := <span class="built_in">make</span>([]<span class="type">int</span>, tLen)</span><br><span class="line">	getNext(next, target, tLen)</span><br><span class="line">	<span class="keyword">for</span>  j &lt; tLen &amp;&amp; i &lt; oLen &#123;</span><br><span class="line">		<span class="keyword">if</span> j == <span class="number">-1</span> || origin[i] == target[j] &#123;</span><br><span class="line">			j++</span><br><span class="line">			i++</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			j = next[j]</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> j &gt;= tLen &#123;</span><br><span class="line">		<span class="keyword">return</span> i - j</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 31</span></span><br><span class="line">	<span class="built_in">println</span>(KMPMatch(<span class="string">&quot;ejr6fnslhbkgjv165gs5e36gb5841s3e65rhbg41sd41rbht35&quot;</span>, <span class="string">&quot;e65rhbg4&quot;</span>))</span><br><span class="line">	<span class="comment">// -1</span></span><br><span class="line">	<span class="built_in">println</span>(KMPMatch(<span class="string">&quot;s154re6bhrsed56bh36sd5r1thb6541brhn365dr4hb&quot;</span>, <span class="string">&quot;abc&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>JavaScript</tag>
        <tag>Java</tag>
        <tag>字符串</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/post/69c3279c/</url>
    <content><![CDATA[<p>记录一些使用 Git 的一些出现过的问题和有用的经验</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="清空分支"><a href="#清空分支" class="headerlink" title="清空分支"></a>清空分支</h2><p>新建分支的话需要选择一个源分支，会导致分支不是空的</p>
<p>我使用到的办法是把仓库中的文件克隆到另一个本地上，再用 <code>git rm -rf .</code> 指令清空本地仓库的所有文件；然后 <code>git commit -m [提交的提示信息]</code> + <code>git push -f [本地分支名] [远程分支名]</code> 覆盖掉分支以达到清空分支的目的</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch</title>
    <url>/post/d32d37e5/</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote>
<p>7.x以前的版本是一个Index多个Type，7.x及之后是一个Index一个Type</p>
</blockquote>
<p><strong>官网下载：</strong> <a href="https://www.elastic.co/cn/downloads/elasticsearch">Download Elasticsearch | Elastic</a> </p>
<p>安装完按需安装分词器，基本含中文都建议装IK分词器插件（分词器版本要和ES版本一样）</p>
<p><strong>IK分词器仓库地址：</strong>  <a href="https://github.com/infinilabs/analysis-ik/releases">Releases · infinilabs&#x2F;analysis-ik (github.com)</a> </p>
<p>剩余的如果需要配置之类的可以搜教程</p>
<h2 id="Kibana管理数据"><a href="#Kibana管理数据" class="headerlink" title="Kibana管理数据"></a>Kibana管理数据</h2><p><strong>官网下载：</strong> <a href="https://www.elastic.co/cn/downloads/kibana">Download Kibana Free | Get Started Now | Elastic</a> </p>
<p>安装完在<strong>config</strong>文件夹下把 <strong>kibana.yml</strong> 配一下（Elasticsearch的端口之类的）</p>
<p>然后在<strong>bin</strong>目录运行后，就可以在 <a href="http://localhost:5601/">http://localhost:5601</a> （默认端口）访问Kibana了</p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="Spring-Data-Elasticsearch"><a href="#Spring-Data-Elasticsearch" class="headerlink" title="Spring Data Elasticsearch"></a>Spring Data Elasticsearch</h3><p>最新的API客户端，可以支持8.x版本的ES，但文档很少</p>
<p>7.6.1版本测试了一下一直报错，上网查似乎是版本不对，就没用了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Rest-High-Level-Client"><a href="#Rest-High-Level-Client" class="headerlink" title="Rest High Level Client"></a>Rest High Level Client</h3><p>不支持8.x的新版本，但是用的最多，文档也很多</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;elasticsearch.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.origin.forumapi.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpHost;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClient;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.client.RestHighLevelClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ES客户端配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liosq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> 2024/3/11 19:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ElasticsearchConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RestHighLevelClient <span class="title function_">restHighLevelClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9200</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DSL-操作"><a href="#DSL-操作" class="headerlink" title="DSL 操作"></a>DSL 操作</h2><blockquote>
<p><strong>DSL（Domain Specific Language）：</strong>一种特定领域的查询语言，用于构建复杂的查询和聚合操作</p>
</blockquote>
<p><strong>所有操作</strong>都可以在Kibana里进行，但<strong>不是所有操作</strong>都可以在Postman或ApiFox这种Http请求工具里进行</p>
<p>因为Http请求中body参数必须符合<strong>json格式</strong>，有些操作（比如bulk操作）并不符合</p>
<p>以下操作基于<strong>7.6.1</strong>版本的ES（只列举了一些基本的操作）</p>
<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询全部</span></span><br><span class="line">GET /index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">	<span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 查询同时带高亮</span></span><br><span class="line">GET /index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxx&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;pre_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;span style=\&quot;color: red\&quot;&gt;&quot;</span><span class="punctuation">,</span> <span class="comment">// 自定义前后标签</span></span><br><span class="line">        <span class="attr">&quot;post_tags&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;/span&gt;&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// bool查询</span></span><br><span class="line">GET /index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>   <span class="comment">// 搜索条件 AND 连接</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="comment">// 搜索条件</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;should&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span> <span class="comment">// 搜索条件 OR 连接</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span> <span class="comment">// 搜索条件</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// range查询（范围查询）</span></span><br><span class="line">GET /index/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> <span class="comment">// greater than or equal</span></span><br><span class="line">        <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">20</span>  <span class="comment">// less than or equal</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>查询结果</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;took&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hits&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;value&quot;</span> <span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span>  <span class="comment">// 符合的结果总数量 但不是查询返回的数量</span></span><br><span class="line">      <span class="attr">&quot;relation&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;eq&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span> <span class="punctuation">:</span> <span class="number">1.0</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;hits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span>...<span class="punctuation">]</span>  <span class="comment">// 里面是对象数组</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="Java-API-操作"><a href="#Java-API-操作" class="headerlink" title="Java API 操作"></a>Java API 操作</h2><p><strong>Spring Data Elasticsearch</strong> 的文档比较少而且API比较好学，所以这里演示的是<strong>Rest High Level Client</strong></p>
<p>以下操作基于<strong>7.6.1</strong>版本的ES</p>
<h3 id="判断索引存在"><a href="#判断索引存在" class="headerlink" title="判断索引存在"></a>判断索引存在</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIndexExist</span><span class="params">(String index)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 判断索引是否存在</span></span><br><span class="line">        <span class="type">GetIndexRequest</span> <span class="variable">getIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(index);</span><br><span class="line">        <span class="keyword">return</span> client.indices().exists(getIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;判断索引 &#123;&#125; 是否存在报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建索引和映射"><a href="#创建索引和映射" class="headerlink" title="创建索引和映射"></a>创建索引和映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">createIndex</span><span class="params">(String index, String mapping)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 创建索引请求并发送</span></span><br><span class="line">        <span class="type">CreateIndexRequest</span> <span class="variable">createIndexRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CreateIndexRequest</span>(index)</span><br><span class="line">            .mapping(mapping, XContentType.JSON);</span><br><span class="line">        <span class="type">CreateIndexResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().create(createIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;创建索引 &#123;&#125; 报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteIndex</span><span class="params">(String index)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(index);</span><br><span class="line">        <span class="type">AcknowledgedResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.isAcknowledged();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;删除索引 &#123;&#125; 报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 该函数为批量添加，单独添加只需创建一个IndexRequest并调用client.index请求即可</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">batchInsertData</span><span class="params">(String index, List&lt;T&gt; data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>(index);</span><br><span class="line">        <span class="keyword">for</span> (T item : data) &#123;</span><br><span class="line">            request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(index).source(JSON.toJSONString(item), XContentType.JSON));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.status().getStatus() == <span class="number">200</span> &amp;&amp; !response.hasFailures();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 批量插入数据报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 批量更新（单独更新则只请求一个UpdateRequest）</span></span><br><span class="line"><span class="comment">// 传入对象由ES根据ID索引后对文档中不同的字段值进行更新</span></span><br><span class="line"><span class="comment">// getId 是实体类获取ID的方法</span></span><br><span class="line"><span class="keyword">public</span> &lt;T, R&gt; <span class="type">boolean</span> <span class="title function_">batchUpdateData</span><span class="params">(String index, List&lt;T&gt; data, Function&lt;T, R&gt; getId)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>(index);</span><br><span class="line">        data.forEach(item -&gt; &#123;</span><br><span class="line">            request.add(<span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(index, getId.apply(item).toString())</span><br><span class="line">                        .doc(JSON.toJSONString(item), XContentType.JSON));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.status().getStatus() == <span class="number">200</span> &amp;&amp; !response.hasFailures();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 批量更新报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询更新 通过编写脚本对文档的字段值进行更新</span></span><br><span class="line"><span class="comment">// Script示例： ctx._source.[field] = 1 （把字段值置为1）</span></span><br><span class="line"><span class="comment">// 可以支持很多复杂的操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="type">boolean</span> <span class="title function_">updateDataByQuery</span><span class="params">(String index, Collection&lt;T&gt; ids, String script)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">UpdateByQueryRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateByQueryRequest</span>(index);</span><br><span class="line">        request.setQuery(QueryBuilders.termsQuery(<span class="string">&quot;id&quot;</span>, ids))</span><br><span class="line">            .setScript(<span class="keyword">new</span> <span class="title class_">Script</span>(script));</span><br><span class="line"></span><br><span class="line">        <span class="type">BulkByScrollResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.updateByQuery(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.getUpdated() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 搜索更新失败&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只写了删除单独数据 批量用BulkRequest包装即可</span></span><br><span class="line"><span class="comment">// 实在不会可以参考上面添加更新数据的批量请求方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">deleteData</span><span class="params">(String index, String id)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(index, id);</span><br><span class="line"></span><br><span class="line">        <span class="type">DeleteResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> response.status().getStatus() == <span class="number">200</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 删除数据报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; PageResult&lt;T&gt; <span class="title function_">searchData</span><span class="params">(String index,</span></span><br><span class="line"><span class="params">                                    Class&lt;T&gt; target,</span></span><br><span class="line"><span class="params">                                    QueryBuilder queryBuilder,</span></span><br><span class="line"><span class="params">                                    HighlightBuilder highlightBuilder,</span></span><br><span class="line"><span class="params">                                    String sortField,</span></span><br><span class="line"><span class="params">                                    SortOrder order,</span></span><br><span class="line"><span class="params">                                    Integer pageNum,</span></span><br><span class="line"><span class="params">                                    Integer pageSize)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(index);</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchSourceBuilder</span>()</span><br><span class="line">            .from((pageNum - <span class="number">1</span>) * pageSize)</span><br><span class="line">            .size(pageSize)</span><br><span class="line">            .query(queryBuilder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 高亮</span></span><br><span class="line">        <span class="keyword">if</span> (highlightBuilder != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.highlighter(highlightBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 排序</span></span><br><span class="line">        <span class="keyword">if</span> (sortField != <span class="literal">null</span>) &#123;</span><br><span class="line">            builder.sort(sortField, order);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">if</span> (response.status().getStatus() == <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;T&gt;(response.getHits().getHits(), target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 搜索报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据补全"><a href="#数据补全" class="headerlink" title="数据补全"></a>数据补全</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">testSuggest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 可以使用querybuilder缩小建议的范围</span></span><br><span class="line">    <span class="type">BoolQueryBuilder</span> <span class="variable">boolQueryBuilder</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">    boolQueryBuilder.mustNot(<span class="keyword">new</span> <span class="title class_">ExistsQueryBuilder</span>(<span class="string">&quot;mainPostId&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">SuggestBuilder</span> <span class="variable">suggestBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>()</span><br><span class="line">        .addSuggestion(<span class="string">&quot;[自定义建议名]&quot;</span>, SuggestBuilders.completionSuggestion(<span class="string">&quot;[字段名]&quot;</span>)</span><br><span class="line">                       .prefix(<span class="string">&quot;[输入的内容（作为前缀）]&quot;</span>)</span><br><span class="line">                       .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">                       .size(<span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> elasticsearchUtil.searchSuggest(POST_INDEX, suggestBuilder, boolQueryBuilder, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="type">CompletionSuggestion</span> <span class="variable">suggestion</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;[自定义建议名]&quot;</span>);</span><br><span class="line">    List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestion.getOptions();</span><br><span class="line">    <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;option = &quot;</span> + option.getText().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽离的工具类</span></span><br><span class="line"><span class="keyword">public</span> Suggest <span class="title function_">searchSuggest</span><span class="params">(String index,</span></span><br><span class="line"><span class="params">                             SuggestBuilder suggestBuilder,</span></span><br><span class="line"><span class="params">                             QueryBuilder queryBuilder,</span></span><br><span class="line"><span class="params">                             String sortField,</span></span><br><span class="line"><span class="params">                             SortOrder order)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(index);</span><br><span class="line">        <span class="type">SearchSourceBuilder</span> <span class="variable">sourceBuilder</span> <span class="operator">=</span> request.source();</span><br><span class="line">        <span class="keyword">if</span> (queryBuilder != <span class="literal">null</span>) &#123;</span><br><span class="line">            sourceBuilder.query(queryBuilder);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sourceBuilder != <span class="literal">null</span>) &#123;</span><br><span class="line">            sourceBuilder.sort(<span class="string">&quot;&quot;</span>, SortOrder.ASC);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response.getSuggest();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;&#123;&#125; 获取搜索建议报错&quot;</span>, index, e);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="创建的索引的映射不对"><a href="#创建的索引的映射不对" class="headerlink" title="创建的索引的映射不对"></a>创建的索引的映射不对</h2><p>检查是否是调用的 <strong>CreateIndexRequest</strong> 的 <strong>mapping</strong> 方法传入的映射；如果没问题，则检查传入的映射是否包含 <strong>properties属性</strong></p>
<p>Mapping示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h2><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>线段树</title>
    <url>/post/8893d943/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/post/c517589e/</url>
    <content><![CDATA[<h1 id="解决的问题"><a href="#解决的问题" class="headerlink" title="解决的问题"></a>解决的问题</h1><p>当遇到需要把图中的<strong>节点合并为一棵树</strong>时，可以用到并查集</p>
<p>比如：问A与B点、B与C点间各有一条路径，问是否存在一条直接或间接路径使A点能通往C点</p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>使用数组或哈希图（序号不大时用数组下标表示序号，序号太大用map存序号 -&gt; 根节点序号的映射）</p>
<p>存储一个数对 $(x,p_x)$ 其中 $x$ <strong>表示节点序号</strong>（保证唯一），<strong>而$p_x$ 表示 $x$ 的根节点序号</strong></p>
<p>初始化令集合内所有数对的 $p_x&#x3D;x$</p>
<h2 id="查询根节点"><a href="#查询根节点" class="headerlink" title="查询根节点"></a>查询根节点</h2><p>对传入节点序号 $x$ 进行以下操作：</p>
<ol>
<li>判断 $p_x$ 是否等于 $x$</li>
<li>若等于，则令 $x&#x3D;p_x$ 重复进行第1步操作</li>
<li>若不等于，则返回 $p_x$</li>
</ol>
<p>返回值即为 $x$ 的根节点序号</p>
<h2 id="合并根节点"><a href="#合并根节点" class="headerlink" title="合并根节点"></a>合并根节点</h2><p>传入节点序号 $a$ 和 $b$ ，进行以下操作：</p>
<ol>
<li>查询 $a , b$ 的根节点序号 $p_a , p_b$ </li>
<li>令 $p_{p_b}&#x3D;p_a$ （即将 $b$ 根节点的树合并到 $a$ 根节点的树下）</li>
</ol>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><h2 id="路径压缩"><a href="#路径压缩" class="headerlink" title="路径压缩"></a>路径压缩</h2><p>对于每个节点来说，查询根节点总要递归经过一些中间节点很影响查询效率</p>
<p>所以我们可以在 <a href="#%E6%9F%A5%E8%AF%A2%E6%A0%B9%E8%8A%82%E7%82%B9">查询</a> 操作的第3步时令 $p_x&#x3D;p_{p_x}$ 后，返回 $p_x$</p>
<h2 id="按秩合并"><a href="#按秩合并" class="headerlink" title="按秩合并"></a>按秩合并</h2><p>当合并两个节点时，我们总是默认令 $b$ 树合并到 $a$ 树上。这会导致当 $b$ 树高度比 $a$ 树高时，合并后的树高度更高一层（如果此时 $a$ 树合并到 $b$ 树上，合并后高度为 $b$ 树高度）</p>
<p>所以我们需要再合并时判断两树的高度，我们把以一个节点为根节点的树的高度成为秩（$rank_x$）</p>
<p>再创建一个数组或图，存储一个根节点序号 -&gt; 秩的映射（数对），初始化 $rank$ 都为1</p>
<p>然后在合并操作前判断 $rank_{p_a}$ 与 $rank_{p_b}$ 的大小，令秩小的根节点合并到秩大的根节点所在树下</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>除了 C++ 其他用的都是哈希表形式实现的，两种方式各有优缺点</p>
<ul>
<li><strong>数组：</strong>访问速度快，序号不大情况下占用内存很小；数组大小受序号大小影响（数组只能开 $2^{32}-1$ 个元素）</li>
<li><strong>哈希表：</strong>访问速度也快但没有数组快，占用内存较大；可以接受多种形式的序号（字符串、数字等）</li>
</ul>
<p>代码都是用全局变量来写的，函数也没有考虑非法参数之类的情况，参考个思路就行了</p>
<h2 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_N 66</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">unf</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> par,rank;</span><br><span class="line">&#125;uf[MAX_N];</span><br><span class="line"><span class="comment">// 查找x的根节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==uf[x].par)</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="comment">// 路径压缩 </span></span><br><span class="line">	uf[x].par=<span class="built_in">find</span>(uf[x].par);</span><br><span class="line">	<span class="keyword">return</span> uf[x].par;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按秩合并两个节点所在树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">const</span> <span class="type">int</span> a,<span class="type">const</span> <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">idx</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="type">int</span> rt[<span class="number">2</span>]=&#123;<span class="built_in">find</span>(a),<span class="built_in">find</span>(b)&#125;;</span><br><span class="line">	<span class="comment">// 秩相同说明树的高度肯定会增加 </span></span><br><span class="line">	<span class="keyword">if</span>(uf[rt[<span class="number">0</span>]].rank==uf[rt[<span class="number">1</span>]].rank)</span><br><span class="line">		uf[rt[<span class="number">0</span>]].rank++;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(uf[rt[<span class="number">0</span>]].rank&lt;uf[rt[<span class="number">1</span>]].rank)</span><br><span class="line">		idx=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">// 合并根节点和秩 </span></span><br><span class="line">	uf[rt[!idx]].par=rt[idx];</span><br><span class="line">	uf[rt[!idx]].rank=uf[rt[idx]].rank;</span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 初始化 </span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;MAX_N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		uf[i].par=i;</span><br><span class="line">		uf[i].rank=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//  0</span></span><br><span class="line">	<span class="comment">//  1</span></span><br><span class="line">	<span class="built_in">merge</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//   0</span></span><br><span class="line">	<span class="comment">// 1   2</span></span><br><span class="line">	<span class="built_in">merge</span>(<span class="number">2</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="comment">//   0   | 5</span></span><br><span class="line">	<span class="comment">// 1   2 | 3</span></span><br><span class="line">	<span class="built_in">merge</span>(<span class="number">5</span>,<span class="number">3</span>);</span><br><span class="line">	<span class="comment">//    0</span></span><br><span class="line">	<span class="comment">// 1  2  5</span></span><br><span class="line">	<span class="comment">//       3</span></span><br><span class="line">	<span class="built_in">merge</span>(<span class="number">0</span>,<span class="number">5</span>);</span><br><span class="line">	<span class="comment">// out: 0 3</span></span><br><span class="line">	cout&lt;&lt;<span class="built_in">find</span>(<span class="number">3</span>)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;uf[<span class="built_in">find</span>(<span class="number">5</span>)].rank;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">unf = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">x: <span class="built_in">int</span></span>):</span><br><span class="line">    par = unf[x][<span class="string">&#x27;par&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> par == x:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    unf[x][<span class="string">&#x27;par&#x27;</span>] = find(par)</span><br><span class="line">    <span class="keyword">return</span> unf[x][<span class="string">&#x27;par&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>):</span><br><span class="line">    roots = [find(a), find(b)]</span><br><span class="line">    merge_root = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> unf[roots[<span class="number">0</span>]][<span class="string">&#x27;rank&#x27;</span>] == unf[roots[<span class="number">1</span>]][<span class="string">&#x27;rank&#x27;</span>]:</span><br><span class="line">        unf[roots[<span class="number">0</span>]][<span class="string">&#x27;rank&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> unf[roots[<span class="number">0</span>]][<span class="string">&#x27;rank&#x27;</span>] &lt; unf[roots[<span class="number">1</span>]][<span class="string">&#x27;rank&#x27;</span>]:</span><br><span class="line">        merge_root = <span class="number">1</span></span><br><span class="line">    unf[roots[<span class="number">1</span> - merge_root]][<span class="string">&#x27;par&#x27;</span>] = roots[merge_root]</span><br><span class="line">    unf[roots[<span class="number">1</span> - merge_root]][<span class="string">&#x27;rank&#x27;</span>] = unf[roots[merge_root]][<span class="string">&#x27;rank&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">nodes: <span class="built_in">list</span>[<span class="built_in">int</span>]</span>):</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">        unf[node] = &#123;</span><br><span class="line">            <span class="string">&#x27;par&#x27;</span>: node,</span><br><span class="line">            <span class="string">&#x27;rank&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">init([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">merge(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">merge(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">merge(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">merge(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment"># 0 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;find(<span class="number">3</span>)&#125;</span> <span class="subst">&#123;unf[find(<span class="number">5</span>)][<span class="string">&#x27;rank&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> liosq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span> 2024/3/9 20:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnionFindTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">UnionFind</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> parent;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> rank;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">UnionFind</span><span class="params">(<span class="type">int</span> parent, <span class="type">int</span> rank)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.parent = parent;</span><br><span class="line">            <span class="built_in">this</span>.rank = rank;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;Integer, UnionFind&gt; unionFindMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span>[] nodes)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> node : nodes) &#123;</span><br><span class="line">            unionFindMap.put(node, <span class="keyword">new</span> <span class="title class_">UnionFind</span>(node, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">find</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">parent</span> <span class="operator">=</span> unionFindMap.get(x).parent;</span><br><span class="line">        <span class="keyword">if</span> (x == parent) &#123;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">        unionFindMap.get(x).parent = find(parent);</span><br><span class="line">        <span class="keyword">return</span> unionFindMap.get(x).parent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mergeRoot</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[] roots = &#123;find(a), find(b)&#125;;</span><br><span class="line">        <span class="keyword">if</span> (unionFindMap.get(roots[<span class="number">0</span>]).rank == unionFindMap.get(roots[<span class="number">1</span>]).rank) &#123;</span><br><span class="line">            unionFindMap.get(roots[<span class="number">0</span>]).rank++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (unionFindMap.get(roots[<span class="number">0</span>]).rank &lt; unionFindMap.get(roots[<span class="number">1</span>]).rank) &#123;</span><br><span class="line">            mergeRoot = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unionFindMap.get(roots[<span class="number">1</span> - mergeRoot]).parent = roots[mergeRoot];</span><br><span class="line">        unionFindMap.get(roots[<span class="number">1</span> - mergeRoot]).rank = unionFindMap.get(roots[mergeRoot]).rank;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        init(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;);</span><br><span class="line">        merge(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        merge(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        merge(<span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line">        merge(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 0 3</span></span><br><span class="line">        System.out.println(find(<span class="number">3</span>) + <span class="string">&quot; &quot;</span> + unionFindMap.get(find(<span class="number">5</span>)).rank);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> unf = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params">nodes</span>) &#123;</span><br><span class="line">    nodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span><br><span class="line">        unf[node] = &#123;</span><br><span class="line">            <span class="attr">par</span>: node,</span><br><span class="line">            <span class="attr">rank</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> par = unf[x].<span class="property">par</span></span><br><span class="line">    <span class="keyword">if</span> (x === par) <span class="keyword">return</span> x</span><br><span class="line">    unf[x].<span class="property">par</span> = <span class="title function_">find</span>(par)</span><br><span class="line">    <span class="keyword">return</span> unf[x].<span class="property">par</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">merge</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> roots = [<span class="title function_">find</span>(a), <span class="title function_">find</span>(b)]</span><br><span class="line">    <span class="keyword">if</span> (unf[roots[<span class="number">0</span>]].<span class="property">rank</span> === unf[roots[<span class="number">1</span>]].<span class="property">rank</span>)</span><br><span class="line">        unf[roots[<span class="number">0</span>]].<span class="property">rank</span>++</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (unf[roots[<span class="number">0</span>]].<span class="property">rank</span> &lt; unf[roots[<span class="number">1</span>]].<span class="property">rank</span>)</span><br><span class="line">        idx = <span class="number">1</span></span><br><span class="line">    unf[roots[<span class="number">1</span> - idx]].<span class="property">par</span> = roots[idx]</span><br><span class="line">    unf[roots[<span class="number">1</span> - idx]].<span class="property">rank</span> = unf[roots[idx]].<span class="property">rank</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">init</span>([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line"><span class="title function_">merge</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="title function_">merge</span>(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="title function_">merge</span>(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line"><span class="title function_">merge</span>(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="comment">// 0 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;find(<span class="number">3</span>)&#125;</span> <span class="subst">$&#123;unf[find(<span class="number">5</span>)].rank&#125;</span>`</span>)</span><br></pre></td></tr></table></figure>

<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 双层map</span></span><br><span class="line"><span class="keyword">var</span> unf <span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> _<span class="title">init</span><span class="params">(nodes []<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> _, node := <span class="keyword">range</span> nodes &#123;</span><br><span class="line">    	<span class="comment">// 嵌套的map也要分配内存空间</span></span><br><span class="line">		unf[node] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">		unf[node][<span class="string">&quot;par&quot;</span>] = node</span><br><span class="line">		unf[node][<span class="string">&quot;rank&quot;</span>] = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">find</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	par := unf[x][<span class="string">&quot;par&quot;</span>]</span><br><span class="line">	<span class="keyword">if</span> x == par &#123;</span><br><span class="line">		<span class="keyword">return</span> x</span><br><span class="line">	&#125;</span><br><span class="line">	unf[x][<span class="string">&quot;par&quot;</span>] = find(par)</span><br><span class="line">	<span class="keyword">return</span> unf[x][<span class="string">&quot;par&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(a <span class="type">int</span>, b <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	idx := <span class="number">0</span></span><br><span class="line">	roots := []<span class="type">int</span>&#123;find(a), find(b)&#125;</span><br><span class="line">	<span class="keyword">if</span> unf[roots[<span class="number">0</span>]][<span class="string">&quot;rank&quot;</span>] == unf[roots[<span class="number">1</span>]][<span class="string">&quot;rank&quot;</span>] &#123;</span><br><span class="line">		unf[roots[<span class="number">0</span>]][<span class="string">&quot;rank&quot;</span>]++</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> unf[roots[<span class="number">0</span>]][<span class="string">&quot;rank&quot;</span>] &lt; unf[roots[<span class="number">1</span>]][<span class="string">&quot;rank&quot;</span>] &#123;</span><br><span class="line">		idx = <span class="number">1</span></span><br><span class="line">	&#125;</span><br><span class="line">	unf[roots[<span class="number">1</span>-idx]][<span class="string">&quot;par&quot;</span>] = roots[idx]</span><br><span class="line">	unf[roots[<span class="number">1</span>-idx]][<span class="string">&quot;rank&quot;</span>] = unf[roots[idx]][<span class="string">&quot;rank&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// go在定义map后要分配内存空间</span></span><br><span class="line">	unf = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)</span><br><span class="line">	_init([]<span class="type">int</span>&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;)</span><br><span class="line">	merge(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">	merge(<span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">	merge(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">	merge(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line">	<span class="comment">// 0 3</span></span><br><span class="line">	fmt.Printf(<span class="string">&quot;%d %d&quot;</span>, find(<span class="number">3</span>), unf[find(<span class="number">5</span>)][<span class="string">&quot;rank&quot;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>Python</tag>
        <tag>JavaScript</tag>
        <tag>并查集</tag>
        <tag>Java</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>泰拉瑞亚</title>
    <url>/post/d4b2ca09/</url>
    <content><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="存档"><a href="#存档" class="headerlink" title="存档"></a>存档</h2><p>世界存档在 C:\Users\[用户名]\Documents\My Games\Terraria\Worlds 目录下</p>
<p>角色存档在 C:\Users\[用户名]\Documents\My Games\Terraria\Players 目录下</p>
<h1 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h1><p>装Mod之前要在Steam下TModLoader（TML），然后直接启动TML在里面下模组就行</p>
<h2 id="灾厄"><a href="#灾厄" class="headerlink" title="灾厄"></a>灾厄</h2><p>泰拉瑞亚最知名的大型Mod，流程应该是最长的，加了非常多的Boss、地形、武器和饰品等等</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>星露谷物语</title>
    <url>/post/83302da4/</url>
    <content><![CDATA[<h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="游戏主文件夹"><a href="#游戏主文件夹" class="headerlink" title="游戏主文件夹"></a>游戏主文件夹</h2><p>如果你是Steam上的星露谷的话，那么文件夹在 <strong>[steam安装目录]\steamapps\common\Stardew Valley</strong> 目录下</p>
<p>比如我的Steam安装在 <strong>D:\Steam</strong>，那么游戏文件夹就在 <strong>D:\Steam\steamapps\common\Stardew Valley</strong>下</p>
<h3 id="存档文件"><a href="#存档文件" class="headerlink" title="存档文件"></a>存档文件</h3><p>存档文件不在游戏文件夹里，默认是存在C盘下的 <strong>C:\Users\[用户名]\AppData\Roaming\StardewValley\Saves</strong></p>
<p>跟上面一样把你的用户名填上就能找到</p>
<p>找到目录后会有你创建的所有存档的文件夹，具体的存档文件就是文件夹下的 <strong>[存档名]_xxxxxxxx</strong>（一段数字）</p>
<p>还有一个带 <strong>_old</strong> 的是昨天的存档，所以你最多是可以回档昨天的</p>
<p>存档文件是xml格式的，在网上有修改存档信息的教程（改之前记得备份）</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="预测器"><a href="#预测器" class="headerlink" title="预测器"></a>预测器</h2><blockquote>
<p> <a href="https://mouseypounds.github.io/stardew-predictor/">Stardew Predictor (mouseypounds.github.io)</a> </p>
</blockquote>
<p>导入你的存档文件，可以预测你的以下信息：</p>
<ul>
<li>矿洞信息</li>
<li>猪车商品</li>
<li>科罗布斯商品</li>
<li>桑迪商品</li>
<li>壁纸</li>
<li>克林特开矿石</li>
<li>火车</li>
<li>夜晚事件</li>
<li>电影院抓娃娃机</li>
<li>垃圾桶</li>
<li>火山附魔</li>
<li>小镇矿洞的宝箱</li>
<li>姜岛宝石鸟 </li>
<li>冬日星盛宴送礼对象</li>
</ul>
<p>等一系列游戏未来通过伪随机生成的信息</p>
<h2 id="完美存档检测"><a href="#完美存档检测" class="headerlink" title="完美存档检测"></a>完美存档检测</h2><blockquote>
<p> <a href="https://mouseypounds.github.io/stardew-checkup/">Stardew Checkup (mouseypounds.github.io)</a> </p>
</blockquote>
<p>导入你的存档文件，可以看到你的存档离完美存档还差些什么</p>
<h2 id="展览会助手"><a href="#展览会助手" class="headerlink" title="展览会助手"></a>展览会助手</h2><blockquote>
<p> <a href="https://mouseypounds.github.io/stardew-fair-helper/">Stardew Fair 助手 (mouseypounds.github.io)</a> </p>
</blockquote>
<p>可以算展览会的分</p>
<h2 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h2><h3 id="国内原版"><a href="#国内原版" class="headerlink" title="国内原版"></a>国内原版</h3><blockquote>
<p> <a href="https://xinglugu.huijiwiki.com/index.php?curid=1">Stardew Valley 中文维基 | 星露谷物语攻略资料站 - 灰机wiki - 北京嘉闻杰诺网络科技有限公司 (huijiwiki.com)</a> </p>
</blockquote>
<h3 id="国外原版"><a href="#国外原版" class="headerlink" title="国外原版"></a>国外原版</h3><blockquote>
<p> <a href="https://stardewvalleywiki.com/Stardew_Valley_Wiki">Stardew Valley Wiki</a> </p>
</blockquote>
<h3 id="国外SVE版"><a href="#国外SVE版" class="headerlink" title="国外SVE版"></a>国外SVE版</h3><blockquote>
<p> <a href="https://stardew-valley-expanded.fandom.com/wiki/Wiki">Wiki | Stardew Valley Expanded Wiki | Fandom</a> </p>
</blockquote>
<p>可能需要挂梯子，Wiki里包含了原版和SVE内容的各种信息</p>
<h1 id="模组"><a href="#模组" class="headerlink" title="模组"></a>模组</h1><p>模组需要到 <a href="https://www.nexusmods.com/stardewvalley/mods/?BH=0">N网</a> 下载（可能要挂梯子），在下Mod之前一定要注意前置Mod，你点下载后他会提示你，一定要把前置Mod都下完才不会报错</p>
<blockquote>
<p>下载之前最好下一个浏览器插件：油猴脚本（Tampermonkey），下载完油猴脚本后，在油猴脚本中搜索Nexus No Wait脚本，下载完并启用脚本，在N网下载Mod就不需要等待5秒了</p>
</blockquote>
<h2 id="Stardew-Modding-API（SMAPI）"><a href="#Stardew-Modding-API（SMAPI）" class="headerlink" title="Stardew Modding API（SMAPI）"></a>Stardew Modding API（SMAPI）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/2400">SMAPI - Stardew Modding API at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>用来给其他模组提供API的模组，而且是<strong>模组的启动器</strong>（类似泰拉瑞亚的TModLoader）</p>
<p>他下载下来会有三种格式的文件是对应不同的<strong>操作系统</strong>的：</p>
<ul>
<li>sh（Linux）</li>
<li>command（MacOS）</li>
<li>bat（Windows）</li>
</ul>
<p>选择对应操作系统的文件并双击运行，根据提示一步步安装就可以了</p>
<p>安装完后你的星露谷游戏目录会有Mods文件夹，用来存放你下载的模组文件（你也可以在这里创建文件夹对模组分类，不会影响模组的正常导入）</p>
<h2 id="模组设置（Generic-Mod-Config-Menu）"><a href="#模组设置（Generic-Mod-Config-Menu）" class="headerlink" title="模组设置（Generic Mod Config Menu）"></a>模组设置（Generic Mod Config Menu）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/5098">Generic Mod Config Menu at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>可以设置所有模组的配置信息，基本是必装的</p>
<h2 id="星露谷拓展（SVE）"><a href="#星露谷拓展（SVE）" class="headerlink" title="星露谷拓展（SVE）"></a>星露谷拓展（SVE）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/3753">Stardew Valley Expanded at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>在原有星露谷的基础上增加了新人物、剧情和地点等等。可以配合其他农场拓展一起用</p>
<h2 id="UI信息（Ui-Info-Suite）"><a href="#UI信息（Ui-Info-Suite）" class="headerlink" title="UI信息（Ui Info Suite）"></a>UI信息（Ui Info Suite）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/1150">Ui Info Suite at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>可以在游戏里查看到很多有用的信息：</p>
<ul>
<li>右上角UI：<ul>
<li>今天的运气</li>
<li>今天的菜谱</li>
<li>今天是什么节日</li>
<li>今天是谁的生日</li>
<li>猪车有没有来</li>
<li>今天是不是树莓（蓝莓）季</li>
<li>升级的工具还有多少天完成</li>
</ul>
</li>
<li>其他信息：<ul>
<li>动物有没有被抚摸、挤奶或剪羊毛等</li>
<li>洒水器、稻草人、蜂箱等带范围的机器的范围显示</li>
<li>工作中的机器还有多久完成</li>
</ul>
</li>
</ul>
<p>还有很多没列举出来，总之很有用就对了 <span class="github-emoji" alias="heart_eyes" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8">&#x1f60d;</span></p>
<h2 id="作弊菜单（CJB-Cheats-Menu）"><a href="#作弊菜单（CJB-Cheats-Menu）" class="headerlink" title="作弊菜单（CJB Cheats Menu）"></a>作弊菜单（CJB Cheats Menu）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/4">CJB Cheats Menu at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>就和修改器一样，可以在游戏里实时改数据</p>
<p>网页上写没有中文但是进去是有中文的</p>
<h2 id="全物品栏（CJB-Item-Spawner）"><a href="#全物品栏（CJB-Item-Spawner）" class="headerlink" title="全物品栏（CJB Item Spawner）"></a>全物品栏（CJB Item Spawner）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/93">CJB Item Spawner at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>游戏中所有的物品（包括正常游戏里拿不到的）</p>
<p>跟上面一样也是游戏里有中文</p>
<h2 id="NPC地图（NPC-Map-Locations）"><a href="#NPC地图（NPC-Map-Locations）" class="headerlink" title="NPC地图（NPC Map Locations）"></a>NPC地图（NPC Map Locations）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/239">NPC Map Locations at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>可以实时显示所有NPC的当前位置，再也不用担心送礼物找不到人啦 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span><span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p>
<h2 id="拖拉机（Tractor-Mod）"><a href="#拖拉机（Tractor-Mod）" class="headerlink" title="拖拉机（Tractor Mod）"></a>拖拉机（Tractor Mod）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/1401">Tractor Mod at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>按退格键 <kbd>BackSpace</kbd> 召唤拖拉机（可以在模组设置里设置没有拖拉机也能召唤）</p>
<p>坐上拖拉机后你现在拿着什么工具他就会在以自己为中心<strong>N × N范围</strong>内自动使用工具</p>
<p>就比如你拿着锄头，坐上拖拉机后就会自动锄地，走到哪锄到哪 <span class="github-emoji" alias="joy" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8">&#x1f602;</span></p>
<p>如果你拿着武器他就自动攻击范围内怪物（拿着弹弓会向你鼠标指针位置射N × N次）</p>
<p>很BT的一个Mod，但是自己玩开心就行了，管那么多干嘛 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p>
<h2 id="自动化（Automate）"><a href="#自动化（Automate）" class="headerlink" title="自动化（Automate）"></a>自动化（Automate）</h2><blockquote>
<p> <a href="https://www.nexusmods.com/stardewvalley/mods/1063">Automate at Stardew Valley Nexus - Mods and community (nexusmods.com)</a> </p>
</blockquote>
<p>可以把箱子和其他工作机器连一起，机器会自动把箱子内的物品作为原料，然后加工完放回到箱子里（所以可以完成一些连锁性的工作）</p>
<p>很好的Mod，使我的肝愉悦 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span><span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>海明码生成</title>
    <url>/post/de37a58/</url>
    <content><![CDATA[<h1 id="海明码生成"><a href="#海明码生成" class="headerlink" title="海明码生成"></a>海明码生成</h1><p>计算机网络中的海明码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getLength</span><span class="params">(string code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(code.size())</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;<span class="number">1</span>;i++)</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2</span>,i)&gt;=len+i+<span class="number">1</span>)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">char</span> <span class="title">judge</span><span class="params">(string s,<span class="type">bool</span> even)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(s.size())</span>,<span class="title">cnt</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">		<span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			cnt++;</span><br><span class="line">	<span class="keyword">if</span>(even)</span><br><span class="line">		<span class="keyword">return</span> (cnt&amp;<span class="number">1</span>?<span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> (cnt&amp;<span class="number">1</span>?<span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">HarmmingCode</span><span class="params">(string code)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">len</span><span class="params">(getLength(code))</span>,<span class="title">idx</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">ans</span><span class="params">(code)</span>,temp[len]</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp[i]=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		ans.<span class="built_in">insert</span>(idx<span class="number">-1</span>,<span class="string">&quot;x&quot;</span>);</span><br><span class="line">		idx*=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	<span class="type">int</span> strLen=ans.<span class="built_in">size</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;strLen;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		idx=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(ans[i]!=<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;len;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>((i+<span class="number">1</span>)&amp;idx)</span><br><span class="line">					temp[j]+=ans[i];</span><br><span class="line">				idx*=<span class="number">2</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	idx=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[idx<span class="number">-1</span>]=<span class="built_in">judge</span>(temp[i],<span class="literal">true</span>);</span><br><span class="line">		idx*=<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	string code;</span><br><span class="line">	cin&gt;&gt;code;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">HarmmingCode</span>(code);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>Html</title>
    <url>/post/b84b57db/</url>
    <content><![CDATA[<h1 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h1><h2 id="富文本div"><a href="#富文本div" class="headerlink" title="富文本div"></a>富文本div</h2><p>设置div的<strong>contenteditable</strong>属性为true即可在div里插入富文本</p>
<p>但是如果用js过滤图片时，如果innerHTML追加了一个<strong>img标签</strong>的话，会自动把img标签内的 &#x2F; 去掉</p>
<p>比如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 会变成下面这样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Html</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/post/cc1b9611/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="防抖函数"><a href="#防抖函数" class="headerlink" title="防抖函数"></a>防抖函数</h2><ul>
<li><strong>原理</strong></li>
</ul>
<p>每次调用时设置定时任务，如果在定时任务执行前再次调用则重置定时任务</p>
<ul>
<li><strong>目的</strong></li>
</ul>
<p>达到<strong>减少调用频率</strong>和<strong>保留最后一次调用</strong>的效果</p>
<h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// callback	: 需要防抖处理的函数</span></span><br><span class="line"><span class="comment">// delay	: 防抖的延迟时长</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">debounce</span> = (<span class="params">callback, delay = <span class="number">200</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 不用箭头函数是因为箭头函数没有this指针</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="异步返回Promise对象"><a href="#异步返回Promise对象" class="headerlink" title="异步返回Promise对象"></a>异步返回Promise对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">asyncDebounce</span> = (<span class="params">callback, delay = <span class="number">200</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args));</span><br><span class="line">            &#125;, delay);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis</title>
    <url>/post/da3e1361/</url>
    <content><![CDATA[<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><h3 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h3><p>MyBatisPlus也能写Mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql驱动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus启动依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mybatis配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># mapper文件的位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">&#x27;classpath:mapper/*Mapper.xml&#x27;</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">  	<span class="comment"># 下划线命名和驼峰命名转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="报错”Error-instantiating-class”"><a href="#报错”Error-instantiating-class”" class="headerlink" title="报错”Error instantiating class”"></a>报错”Error instantiating class”</h2><p>一般是因为没有无参构造方法</p>
<h2 id="Mapper有传Java对象到XML时报错"><a href="#Mapper有传Java对象到XML时报错" class="headerlink" title="Mapper有传Java对象到XML时报错"></a>Mapper有传Java对象到XML时报错</h2><p>要在Mapper接口的对应方法参数前加@Param注解</p>
<p>或者在XML的crud标签中加上parameterType属性</p>
<h2 id="XML的SQL代码中有重复的需要列举出来的列名"><a href="#XML的SQL代码中有重复的需要列举出来的列名" class="headerlink" title="XML的SQL代码中有重复的需要列举出来的列名"></a>XML的SQL代码中有重复的需要列举出来的列名</h2><p>用sql标签抽离出公共列名，然后用include标签调用</p>
<h2 id="Collection一对多映射只映射了一个的问题"><a href="#Collection一对多映射只映射了一个的问题" class="headerlink" title="Collection一对多映射只映射了一个的问题"></a>Collection一对多映射只映射了一个的问题</h2><p>首先要保证collection中<strong>id的别名</strong>没有重复</p>
<p>其次如果主要对象的<strong>数据库中id字段</strong>也叫id（不是user_id这种），则需要在resultMap中把主要对象的ID也改成别名</p>
<p><strong>例子：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 主要对象为post 一对多映射对象为comments --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;post_detail_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;comments&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;java.util.ArrayList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.origin.forumapi.pojo.vo.CommentVO&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;comment_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="PageHelper在对含有Collection映射的数据分页数据错乱问题"><a href="#PageHelper在对含有Collection映射的数据分页数据错乱问题" class="headerlink" title="PageHelper在对含有Collection映射的数据分页数据错乱问题"></a>PageHelper在对含有Collection映射的数据分页数据错乱问题</h2><p>PageHelper是对sql查询到的<strong>总条数</strong>进行分页，上网搜有几种解决方法：</p>
<ol>
<li>用MyBatis的子查询对Collection进行映射</li>
<li>在service层进行两次查询</li>
<li>封装Page类（没看懂，链接在下面）</li>
</ol>
<blockquote>
<p> <a href="https://code84.com/793576.html">【Java】PageHelper分页总条数和总页数查询不正确 – 源码巴士 (code84.com)</a> </p>
</blockquote>
<h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="resultMap注意事项"><a href="#resultMap注意事项" class="headerlink" title="resultMap注意事项"></a>resultMap注意事项</h2><ul>
<li><p>id和result标签就写个<strong>property</strong>和<strong>column</strong>属性就行</p>
</li>
<li><p>如果Java对象的<strong>所有属性</strong>和数据库<strong>列名</strong>只有<strong>驼峰下划线命名冲突</strong>的话可以直接用<strong>autoMapping</strong>（要在配置文件中把map-underscore-to-camel-case设为true）</p>
</li>
<li><p><strong>记得Java对象要加无参构造方法</strong></p>
</li>
</ul>
<h2 id="Intelij的MyBatisX插件"><a href="#Intelij的MyBatisX插件" class="headerlink" title="Intelij的MyBatisX插件"></a>Intelij的MyBatisX插件</h2><p>在写Mapper接口和xml的时候很好用，可以在接口跳转到xml并生成对应方法的<strong>crud标签</strong></p>
<h2 id="一个XML标签写多个SQL语句"><a href="#一个XML标签写多个SQL语句" class="headerlink" title="一个XML标签写多个SQL语句"></a>一个XML标签写多个SQL语句</h2><p><strong>可以实现</strong>，但是要在配置文件中的<strong>数据库url</strong>后面加上<strong>allowMultiQueries&#x3D;true</strong></p>
<h2 id="MyBatis子查询"><a href="#MyBatis子查询" class="headerlink" title="MyBatis子查询"></a>MyBatis子查询</h2><p>如果标签里有<strong>resultMap属性</strong>需要去掉，把resultMap放在子查询的标签里</p>
<p>需要在标签里加<strong>column属性</strong>，其表示<strong>主查询中的字段值到子查询的映射</strong>，格式是{子查询要用的变量名&#x3D;主查询的字段名}。子查询用#{}调用值</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL</title>
    <url>/post/4d712855/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="多表拼接"><a href="#多表拼接" class="headerlink" title="多表拼接"></a>多表拼接</h2><p>当两个表join后<strong>再次join其他表前</strong>，需要用<strong>select语句</strong>将<strong>前两个表join的结果</strong>进行整合</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> b <span class="keyword">ON</span> ...) <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> c <span class="keyword">ON</span> ...;</span><br></pre></td></tr></table></figure>

<h2 id="SET变量接收多行数据"><a href="#SET变量接收多行数据" class="headerlink" title="SET变量接收多行数据"></a>SET变量接收多行数据</h2><p>目前在网上找了一圈没有什么非常好的方案，这里举出来一个相对较好的方案：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 用GROUP_CONCAT将查询语句返回的多行数据拼接成一个集合</span><br><span class="line"><span class="keyword">SET</span> <span class="variable">@ids</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> GROUP_CONCAT(id SEPERATOR <span class="string">&#x27;,&#x27;</span>) <span class="keyword">FROM</span> ...);</span><br><span class="line"># 使用FIND_IN_SET在集合里找目标ID</span><br><span class="line"><span class="keyword">SELECT</span> id <span class="keyword">FROM</span> ... <span class="keyword">WHERE</span> FIND_IN_SET(id, <span class="variable">@ids</span>);</span><br></pre></td></tr></table></figure>

<p>显而易见，这种方法的局限很大，不能适用于字符串类型的数据</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot</title>
    <url>/post/6f2612a2/</url>
    <content><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="Transactional不回滚的问题"><a href="#Transactional不回滚的问题" class="headerlink" title="@Transactional不回滚的问题"></a>@Transactional不回滚的问题</h2><p>在一个方法上声明了该注解并且<strong>抛出异常后</strong>没有进行回滚操作的话，需要检查以下几点：</p>
<ul>
<li>检查是否有<strong>try catch块</strong>捕获了异常但<strong>未再抛出</strong></li>
<li>检查注解是否初始化了<strong>rollbackFor</strong>参数（一般为rollbackFor &#x3D; Exception.class）</li>
</ul>
<h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="实现IP封禁"><a href="#实现IP封禁" class="headerlink" title="实现IP封禁"></a>实现IP封禁</h2><p>目前只了解了下面这几种实现方法（登录权限拦截思路也一样）</p>
<ul>
<li><strong>全局拦截：</strong>创建Interceptor拦截所有的方法（一劳永逸，但是灵活性不是很高）</li>
<li><strong>自定义注解：</strong>在Interceptor中对每个加了注解的方法进行访问的拦截（可以自定义不同方法的合法访问频率）</li>
</ul>
<h2 id="DTO和VO"><a href="#DTO和VO" class="headerlink" title="DTO和VO"></a>DTO和VO</h2><p>粗略的在网上查了一下，大概是<strong>DTO</strong>是<strong>前端传后端</strong>接收用的对象；<strong>VO</strong>是<strong>后端传前端</strong>发送的对象？</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫-某云音乐缓存</title>
    <url>/post/91dd4a8a/</url>
    <content><![CDATA[<p>在b站刷到个把某云音乐缓存转成mp3或者flac格式的视频，比较好奇就点开看了一下</p>
<p>那个up是专门做逆向的，用了些反编译的软件和把汇编代码转高级语言代码的软件。从读取缓存到缓存加密的过长一步一步向底层深挖，推导出缓存加密的函数的内存地址，最后发现缓存加密很简单，解密只需要异或一下就行了（开发人员偷大懒）</p>
<p>于是自己也动手试了一下，发现确实是这么个原理。但是有一些不足之处就是不知道缓存文件代表哪首歌，一首一首听是肯定不可能的</p>
<p>上网找了找缓存文件哈希码的含义，发现有一篇文章说缓存文件的哈希码是对应着其歌曲在某云数据库中的一个字段，可以把哈希码作为请求参数请求其api直接获取这首歌的全部信息</p>
<p>于是我便简单封装了一下代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">cache_path = <span class="string">&#x27;C:\\Users\\...\\AppData\\Local\\Netease\\CloudMusic\\Cache\\Cache&#x27;</span></span><br><span class="line"><span class="comment"># 解码后音乐文件的存储目录</span></span><br><span class="line">target_path = <span class="string">&#x27;...&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_music_names</span>(<span class="params">filenames</span>):</span><br><span class="line">    <span class="comment"># 请求官方api (根本不需要改User-Agent...)</span></span><br><span class="line">    music_ids = <span class="string">&#x27;,&#x27;</span>.join([_[:_.index(<span class="string">&#x27;-&#x27;</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> filenames])</span><br><span class="line">    resp = requests.get(<span class="string">f&#x27;http://music.163.com/api/song/detail/?id=<span class="subst">&#123;music_ids&#125;</span>&amp;ids=[<span class="subst">&#123;music_ids&#125;</span>]&#x27;</span>).json()</span><br><span class="line">    <span class="keyword">return</span> [song[<span class="string">&#x27;name&#x27;</span>] <span class="keyword">for</span> song <span class="keyword">in</span> resp[<span class="string">&#x27;songs&#x27;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_file</span>(<span class="params">file_name, music_name</span>):</span><br><span class="line">    temp = file_name.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    name = temp[<span class="number">0</span>]</span><br><span class="line">    ext = temp[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ext == <span class="string">&#x27;uc&#x27;</span>:</span><br><span class="line">    	<span class="comment"># 缓存文件夹中有一个记录了缓存文件源格式的文件</span></span><br><span class="line">        <span class="comment"># 打开 info 文件获取文件格式名</span></span><br><span class="line">        info = json.loads(<span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;cache_path&#125;</span>\\<span class="subst">&#123;name&#125;</span>.info&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read())</span><br><span class="line">        target_ext = info[<span class="string">&#x27;format&#x27;</span>]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 获取 uc 缓存文件内容</span></span><br><span class="line">            cont = <span class="built_in">bytearray</span>(<span class="built_in">open</span>(<span class="string">f&#x27;<span class="subst">&#123;cache_path&#125;</span>\\<span class="subst">&#123;file_name&#125;</span>&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read())</span><br><span class="line">            <span class="comment"># 异或 163 解码内容</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cont)):</span><br><span class="line">                cont[i] ^= <span class="number">163</span></span><br><span class="line">            <span class="comment"># 写入到指定目录中</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;<span class="subst">&#123;target_path&#125;</span>\\<span class="subst">&#123;music_name&#125;</span>.<span class="subst">&#123;target_ext&#125;</span>&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="built_in">bytes</span>(cont))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span>\t--&#x27;</span></span><br><span class="line">                  <span class="string">f&#x27;-&gt;\t<span class="subst">&#123;music_name&#125;</span>.<span class="subst">&#123;target_ext&#125;</span> 解码成功&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;file_name&#125;</span>\t--&#x27;</span></span><br><span class="line">                  <span class="string">f&#x27;-x\t<span class="subst">&#123;music_name&#125;</span>.<span class="subst">&#123;target_ext&#125;</span> 解码失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_all_files</span>(<span class="params">file_names, music_names</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(file_names)):</span><br><span class="line">        decode_file(file_names[i], music_names[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">orders = [</span><br><span class="line">    <span class="string">&#x27;解码全部文件&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;解码指定文件&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;退出&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> root, dirs, file_names <span class="keyword">in</span> os.walk(cache_path):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        file_names = [_ <span class="keyword">for</span> _ <span class="keyword">in</span> file_names <span class="keyword">if</span> _.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] == <span class="string">&#x27;uc&#x27;</span>]</span><br><span class="line">        music_names = get_music_names(file_names)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>.\t<span class="subst">&#123;orders[i]&#125;</span>&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(orders))]))</span><br><span class="line">        order = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入序号: &#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> order == <span class="number">1</span>:</span><br><span class="line">            decode_all_files(file_names)</span><br><span class="line">        <span class="keyword">elif</span> order == <span class="number">2</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;i + <span class="number">1</span>&#125;</span>\t- <span class="subst">&#123;music_names[i]&#125;</span>&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(music_names))]))</span><br><span class="line">            order = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;输入指定文件序号: &#x27;</span>))</span><br><span class="line">            decode_file(file_names[order - <span class="number">1</span>], music_names[order - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> order == <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;无该选项&#x27;</span>)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Python</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫-文献数据</title>
    <url>/post/4fc25800/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>知识库的项目缺数据，学长在群里本来让其他两个人爬数据来着，但是过了一周开会他们也没爬到数据，说还在学什么的</p>
<p>从语气可以感觉到学长有点生气了，开始催我们抓紧进度什么的，然后问我会爬虫吗？让我也开始学爬虫</p>
<h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><p>其实那一周我是学了一下爬虫的，记得周三有一节物联网课没心思听课就打算爬一下百度翻译的api</p>
<p>因为前端还行，所以很快定位到了请求接口，发现请求参数都很正常。除了一个sign，是一直变化，而且似乎是根据你传入文本的值变化而变化</p>
<p>没想到刚开始学就碰上硬茬了，正琢磨怎么生成这个签名呢。突然想起来上学期实训考试，老师在旁边说考试网站有bug，你们要能找出来就能满分。我就一步一步打断点分析考试数据是怎么渲染到浏览器上，结果就发现了请求获取到的数据里有答案</p>
<p>于是我就沿用那次的方法，一步一步打断点，找到了生成签名的函数，函数很长，而且感觉是被混淆加密过的。索性就把整个函数搬过来，上网查了查怎么在Python里调用JavaScript函数，导了个包就解决了。当时搞完已经是快下课了，当时心情就是非常激动，然后就把代码封装成一个类，每次想用翻译就直接引入这个类就ok</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="comment"># lan_list是一个语言映射列表，也是直接拦截请求就能找到</span></span><br><span class="line"><span class="keyword">from</span> baidufanyi.languages <span class="keyword">import</span> lan_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaiduTranslate</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.headers = &#123;</span><br><span class="line">            <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;fanyi.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://fanyi.baidu.com&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.76&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;BIDUPSID=3C574EAB32054FCD30DC5846A976DC4B; PSTM=1688952101; ab_jid=4eb88762366f56ee5a5d3c3092286b01c2d9; ab_jid_BFESS=4eb88762366f56ee5a5d3c3092286b01c2d9; BAIDUID=3C574EAB32054FCDB33D0B497C31F8D1:SL=0:NR=10:FG=1; BDUSS=VaRk5sd1Z-V1FuNzhhT0VRdG5KV3JZS21EUFNaQTVtSXBtWk9WbnlFY0ttLWxrSVFBQUFBJCQAAAAAAAAAAAEAAAA7lO9Os8K4r9XmzNjDtMnuaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOwmQKDsJkWX; BDUSS_BFESS=VaRk5sd1Z-V1FuNzhhT0VRdG5KV3JZS21EUFNaQTVtSXBtWk9WbnlFY0ttLWxrSVFBQUFBJCQAAAAAAAAAAAEAAAA7lO9Os8K4r9XmzNjDtMnuaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoOwmQKDsJkWX; H_PS_PSSID=39841_39935_39937_39933_39943_39938_39999_40013_40044; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; H_WISE_SIDS=39841_39935_39937_39933_39943_39938_39999_40013_40044; H_WISE_SIDS_BFESS=39841_39935_39937_39933_39943_39938_39999_40013_40044; BA_HECTOR=00a12k8kakal8g8h0ga58520f1i3ti1iojb081t; delPer=0; PSINO=7; ZFY=bCJZ:BP4jc0fMbEy0wl0IlAEUqO85tc5LYTDqupa4wQQ:C; BAIDUID_BFESS=3C574EAB32054FCDB33D0B497C31F8D1:SL=0:NR=10:FG=1; ab_bid=6bcd63a63cfe1563cd9c774b846c036f7250; ab_sr=1.0.1_YzNhOTYzM2E1ZjMwZmQ4Y2NiNDQwNTFmMTY1YTVhOGU0NmZiYzY3N2M0MDBhNjhkMDY2M2JmYjAyMzk3MjFkYjYxNTIxZDBmY2VmZWUyYzU1MGJjZTFkZTkyY2UzYTVlMjM1MDhiYTE1OTQ2NmJhY2IwNzQwNDkzNTJmNzY0M2RhZDUwMTVlM2JiYjAxMjc2NjY0MWNmZTIwNzdjMWU4NWFmMmRjYjFiYThkZGI5NDdkZTA4MjM0ZTczODhjZDRj&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Acs-Token&#x27;</span>: <span class="string">&#x27;1703476878072_1703520782449_cuD4/9ppyjvk6OcczGm+t0+Euqsb3taki25RxfARn3AKX75f5Dq2nr+XaKK47r99gxrJeRwQsph6sRla0fgqoyg7boTYST5KS8F5iwPRRgL1R0OFaqIxxdPpFxcMSB8ScBu34BYQrqJ44t82KFN1jkV9Y9myo9uadOHMOkIHq4mBNdX2hH9ZWCX1zSOPjzpNx0VrSOeVRZUahZoQSf3lLm40ESAKAhkpQ1KlV3XL6hUxjJalKjgCU2nIlDRExu+UGV/QXYZ25uVCvztRMSk8WHEDzsDeXiGEG3iFOqnNC7b1oItuEKUpPN1umjTqGTXl8OnYM2Yk4YIJLKkM/OM+ZEOcdtfoVxgh1bW4onnvR15CyQNBSDa6Gk9QA99gyAAa62+VuoaCLJ0W2hkLcPL7ya4BP8Ovj8c9J6pQNSpwTHeNxGIwcyeep+YH3KWZ2BUwT0nySVqcECqwghq0Jj7a2ZXo2sr90TQyewpCQvAJQ+u1ZcBio0liWnpeK18d/VVP&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.data = &#123;</span><br><span class="line">            <span class="string">&#x27;query&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;sign&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;transtype&#x27;</span>: <span class="string">&#x27;realtime&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;token&#x27;</span>: <span class="string">&#x27;a15d651ffb02721a9d3943e0d724387c&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;simple_means_flag&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;ts&#x27;</span>: <span class="built_in">int</span>(time.time_ns() / <span class="number">1e6</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        self.ctx = execjs.<span class="built_in">compile</span>(<span class="built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;sign.js&#x27;</span>), <span class="string">&#x27;r&#x27;</span>).read())</span><br><span class="line">        self.log = <span class="built_in">open</span>(os.path.join(os.path.dirname(__file__), <span class="string">&#x27;translate.log&#x27;</span>), <span class="string">&#x27;a&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        self.log_params = &#123;</span><br><span class="line">            <span class="string">&quot;from_lan&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;to_lan&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;result&quot;</span>: <span class="string">&#x27;无&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;code&quot;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;response&quot;</span>: <span class="string">&#x27;无&#x27;</span>,</span><br><span class="line">            <span class="string">&quot;cost_time&quot;</span>: <span class="string">&#x27;请求失败&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detect_lan</span>(<span class="params">self, content</span>):</span><br><span class="line">        resp = requests.post(<span class="string">f&#x27;https://fanyi.baidu.com/langdetect&#x27;</span>,</span><br><span class="line">                             headers=self.headers,</span><br><span class="line">                             data=&#123;<span class="string">&#x27;query&#x27;</span>: content&#125;)</span><br><span class="line">        <span class="keyword">if</span> resp.ok:</span><br><span class="line">            json = resp.json()</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;lan&#x27;</span> <span class="keyword">in</span> json:</span><br><span class="line">                <span class="keyword">return</span> json[<span class="string">&#x27;lan&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;zh&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">translate</span>(<span class="params">self, from_lan, to_lan, content</span>):</span><br><span class="line">        <span class="keyword">if</span> from_lan <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            from_lan = self.detect_lan(content)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> lan_key <span class="keyword">in</span> lan_list.keys():</span><br><span class="line">            <span class="keyword">if</span> lan_list[lan_key] == from_lan:</span><br><span class="line">                self.log_params[<span class="string">&#x27;from_lan&#x27;</span>] = lan_key</span><br><span class="line">            <span class="keyword">elif</span> lan_list[lan_key] == to_lan:</span><br><span class="line">                self.log_params[<span class="string">&#x27;to_lan&#x27;</span>] = lan_key</span><br><span class="line">        self.log_params[<span class="string">&#x27;content&#x27;</span>] = content</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> from_lan == to_lan:</span><br><span class="line">            self.print_log()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;源语言类型与目标语言相同&#x27;</span></span><br><span class="line"></span><br><span class="line">        sign = self.ctx.call(<span class="string">&#x27;getSign&#x27;</span>, content)</span><br><span class="line">        url = <span class="string">f&#x27;https://fanyi.baidu.com/v2transapi?from=<span class="subst">&#123;from_lan&#125;</span>&amp;to=<span class="subst">&#123;to_lan&#125;</span>&#x27;</span></span><br><span class="line">        self.data[<span class="string">&#x27;sign&#x27;</span>] = sign</span><br><span class="line">        self.data[<span class="string">&#x27;query&#x27;</span>] = content</span><br><span class="line"></span><br><span class="line">        clock = time.time_ns()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            resp = requests.post(url, headers=self.headers, data=self.data, timeout=(<span class="number">3.0</span>, <span class="number">5.0</span>))</span><br><span class="line">        <span class="keyword">except</span> requests.RequestException:</span><br><span class="line">            self.print_log()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请求失败&#x27;</span></span><br><span class="line">        <span class="keyword">except</span> requests.ReadTimeout <span class="keyword">or</span> requests.Timeout:</span><br><span class="line">            self.print_log()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;请求超时&#x27;</span></span><br><span class="line"></span><br><span class="line">        clock = (time.time_ns() - clock) / <span class="number">1e9</span></span><br><span class="line">        <span class="keyword">if</span> clock &lt; <span class="number">10</span>:</span><br><span class="line">            clock = <span class="built_in">round</span>(clock, <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">elif</span> clock &lt; <span class="number">100</span>:</span><br><span class="line">            clock = <span class="built_in">round</span>(clock, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">elif</span> clock &lt; <span class="number">1000</span>:</span><br><span class="line">            clock = <span class="built_in">round</span>(clock, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            clock = <span class="built_in">int</span>(clock)</span><br><span class="line">        self.log_params[<span class="string">&#x27;cost_time&#x27;</span>] = <span class="built_in">str</span>(clock)</span><br><span class="line">        self.log_params[<span class="string">&#x27;code&#x27;</span>] = <span class="built_in">str</span>(resp.status_code)</span><br><span class="line">        res = resp.json()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;trans_result&#x27;</span> <span class="keyword">in</span> res.keys():</span><br><span class="line">            result = res[<span class="string">&#x27;trans_result&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;dst&#x27;</span>]</span><br><span class="line">            self.log_params[<span class="string">&#x27;result&#x27;</span>] = result</span><br><span class="line">            self.print_log()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        self.log_params[<span class="string">&#x27;response&#x27;</span>] = resp.text</span><br><span class="line">        self.print_log()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这个是改进后的，想拓展一下打个日志</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_log</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;———————\t<span class="subst">&#123;datetime.now()&#125;</span>\t————————\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;源语言类型:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;from_lan&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;目标语言类型:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;to_lan&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;翻译内容:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;翻译结果:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;result&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;请求耗时:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;cost_time&#x27;</span>]&#125;</span> ms\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;请求状态:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;code&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">              <span class="string">f&quot;请求返回内容:\t<span class="subst">&#123;self.log_params[<span class="string">&#x27;response&#x27;</span>]&#125;</span>&quot;</span>, file=self.log)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">choose_lan</span>(<span class="params">self, tip</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            res = <span class="built_in">input</span>(tip)</span><br><span class="line">            keys = [key <span class="keyword">for</span> key <span class="keyword">in</span> lan_list.keys() <span class="keyword">if</span> key.find(res) &gt;= <span class="number">0</span>]</span><br><span class="line">            vals = [val <span class="keyword">for</span> val <span class="keyword">in</span> lan_list.values() <span class="keyword">if</span> val.find(res) &gt;= <span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(keys) == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">len</span>(vals) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(keys) == <span class="number">1</span>:</span><br><span class="line">                res = lan_list[keys[<span class="number">0</span>]]</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(vals) == <span class="number">1</span>:</span><br><span class="line">                res = vals[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> keys:</span><br><span class="line">                flag = <span class="built_in">input</span>(<span class="string">f&quot;是 <span class="subst">&#123;key&#125;</span> 吗? (y/...): &quot;</span>).lower() == <span class="string">&#x27;y&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    res = lan_list[key]</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">            <span class="keyword">for</span> val <span class="keyword">in</span> vals:</span><br><span class="line">                flag = <span class="built_in">input</span>(<span class="string">f&quot;是 <span class="subst">&#123;val&#125;</span> 吗? (y/...): &quot;</span>).lower() == <span class="string">&#x27;y&#x27;</span></span><br><span class="line">                <span class="keyword">if</span> flag:</span><br><span class="line">                    res = val</span><br><span class="line">                    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>再然后，我就开始爬文献了。第一次爬的是中南大学学报，看了看请求发现网站居然是前后端分离的，直接把接口cv过来就爬完了。我马上在群里问学长数据是这样吗，学长也是很惊讶我当天晚上就爬完了（但也确实很简单）​ <span class="github-emoji" alias="slightly_smiling_face" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f642.png?v8">&#x1f642;</span>	</p>
<p>再再然后，我就专门负责爬数据了，转而开始爬其他大学学报的数据，因为大学学报的文献都是免费下载的，所以也不存在爬数据违法（至少学长是这么说的）。爬的时候才发现原来前后端分离的只是少数，绝大部分学报用的都是后端直接返回网页的模式，而且似乎好多学报的网站架构都差不多，只能爬完网页嗯分析了 <span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">&#x1f62d;</span></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>一些开源项目</title>
    <url>/post/2035aef/</url>
    <content><![CDATA[<h1 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h1><h2 id="scrcpy"><a href="#scrcpy" class="headerlink" title="scrcpy"></a>scrcpy</h2><blockquote>
<p> <a href="https://github.com/Genymobile/scrcpy">GitHub - Genymobile&#x2F;scrcpy: Display and control your Android device</a> </p>
</blockquote>
<p>一个手机投屏的软件，没有GUI，但是延迟巨低，自己用的感觉延迟大概只有几十毫秒，但是有些限制屏幕录像或者截图的页面就会黑屏。比如微信支付码、学习通考试什么的… 但是可以共享手机相机的画面</p>
<h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><p>去github找到项目（上面的链接），在releases里找到最新的版本下载下来压缩包解压就能用了</p>
<h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><p>手机第一次连需要用usb连电脑，把<strong>开发者模式、usb调试</strong>什么的打开，然后手机电脑连同一个wifi用**–tcp-ip**启动就能直接连了</p>
<p>有点鸡肋的地方就是如果电脑关机，那手机又要用usb连了。就相当于可以无线投屏维持到电脑关机前</p>
<p>也可以直接运行我写好的<strong>startcpy.bat</strong>（文件名改了的话需要编辑一下脚本）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先<span class="built_in">cd</span>到scrcpy.exe那个目录下</span></span><br><span class="line">cd ....</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接运行.exe程序，用wifi连就加--tcp-ip</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其实第一次连就加--tcp-ip也是可以的</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">还有什么全屏投屏好像是-f，可以去github看看官方文档</span></span><br><span class="line">.\scrcpy.exe</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>油猴脚本</title>
    <url>/post/e4f71868/</url>
    <content><![CDATA[<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>油猴脚本能在网页里植入js脚本代码，在需要对网页中的众多元素进行统一操作时（包括但不限于各类用户事件、提取数据等），很有帮助</p>
<h2 id="一些注意的点"><a href="#一些注意的点" class="headerlink" title="一些注意的点"></a>一些注意的点</h2><ul>
<li>如果该网页中导入了类似jQuery这种的js库文件，可以在脚本里直接使用</li>
<li>若在获取网页元素总获取不到，大概率是因为js的启动函数是在html渲染元素之前就执行的，要吗setTimeout一下，要吗搞个回调函数（我是没怎么用过）</li>
</ul>
]]></content>
      <categories>
        <category>油猴脚本</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>P1219 [USACO1.5]八皇后 Checker Challenge</title>
    <url>/post/d3f8ea54/</url>
    <content><![CDATA[<h1 id="P1219-USACO1-5-八皇后-Checker-Challenge"><a href="#P1219-USACO1-5-八皇后-Checker-Challenge" class="headerlink" title="P1219 [USACO1.5]八皇后 Checker Challenge"></a>P1219 [USACO1.5]八皇后 Checker Challenge</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1219">P1219 [USACO1.5]八皇后 Checker Challenge - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1669893012863.png" alt="1669893012863"></p>
<p><img data-src="/images/typora/1669893024657.png" alt="1669893024657"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans[<span class="number">14</span>],<span class="built_in">cnt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">bool</span> col[<span class="number">20001</span>],rDia[<span class="number">40001</span>],lDia[<span class="number">40001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!col[j]&amp;&amp;!rDia[i+j]&amp;&amp;!lDia[i-j+n])</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i]=j;</span><br><span class="line">			<span class="keyword">if</span>(i&gt;=n)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(cnt++&lt;<span class="number">3</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;cout&lt;&lt;ans[k++]&lt;&lt;<span class="string">&quot; &quot;</span>);</span><br><span class="line">					cout&lt;&lt;endl;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				col[j]=rDia[i+j]=lDia[i-j+n]=<span class="number">1</span>;</span><br><span class="line">				<span class="built_in">dfs</span>(i+<span class="number">1</span>);</span><br><span class="line">				col[j]=rDia[i+j]=lDia[i-j+n]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	cout&lt;&lt;cnt;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>回溯</tag>
      </tags>
  </entry>
  <entry>
    <title>P1077 [NOIP2012 普及组] 摆花</title>
    <url>/post/7e5107de/</url>
    <content><![CDATA[<h1 id="P1077-NOIP2012-普及组-摆花"><a href="#P1077-NOIP2012-普及组-摆花" class="headerlink" title="P1077 [NOIP2012 普及组] 摆花"></a>P1077 [NOIP2012 普及组] 摆花</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1077">P1077 [NOIP2012 普及组] 摆花 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666877786730.png" alt="1666877786730"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x[<span class="number">101</span>],dp[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cin&gt;&gt;x[i++]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=x[<span class="number">1</span>];dp[<span class="number">1</span>][i++]=<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=x[i]&amp;&amp;k&lt;=j;k++)</span><br><span class="line">				dp[i][j]+=dp[i<span class="number">-1</span>][j-k];</span><br><span class="line">			dp[i][j]%=<span class="number">1000007</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	cout&lt;&lt;dp[n][m];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P3842 [TJOI2007]线段</title>
    <url>/post/74a8468c/</url>
    <content><![CDATA[<h1 id="P3842-TJOI2007-线段"><a href="#P3842-TJOI2007-线段" class="headerlink" title="P3842 [TJOI2007]线段"></a>P3842 [TJOI2007]线段</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P3842">P3842 [TJOI2007]线段 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666871320081.png" alt="1666871320081"></p>
<p><img data-src="/images/typora/1666871330082.png" alt="1666871330082"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,l[<span class="number">20001</span>],r[<span class="number">20001</span>],dp[<span class="number">2</span>][<span class="number">20001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		cin&gt;&gt;l[i]&gt;&gt;r[i];</span><br><span class="line">	dp[<span class="number">1</span>][<span class="number">1</span>]=r[<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line">	dp[<span class="number">0</span>][<span class="number">1</span>]=dp[<span class="number">1</span>][<span class="number">1</span>]+r[<span class="number">1</span>]-l[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		dp[<span class="number">0</span>][i]=<span class="built_in">min</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>]+r[i]-l[i]+<span class="built_in">abs</span>(r[i]-l[i<span class="number">-1</span>]),dp[<span class="number">1</span>][i<span class="number">-1</span>]+r[i]-l[i]+<span class="built_in">abs</span>(r[i]-r[i<span class="number">-1</span>]))+<span class="number">1</span>;</span><br><span class="line">		dp[<span class="number">1</span>][i]=<span class="built_in">min</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>]+r[i]-l[i]+<span class="built_in">abs</span>(l[i]-l[i<span class="number">-1</span>]),dp[<span class="number">1</span>][i<span class="number">-1</span>]+r[i]-l[i]+<span class="built_in">abs</span>(l[i]-r[i<span class="number">-1</span>]))+<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;n+<span class="built_in">min</span>(dp[<span class="number">0</span>][n]-l[n],dp[<span class="number">1</span>][n]-r[n]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P1095 [NOIP2007 普及组] 守望者的逃离</title>
    <url>/post/228a26d0/</url>
    <content><![CDATA[<h1 id="P1095-NOIP2007-普及组-守望者的逃离"><a href="#P1095-NOIP2007-普及组-守望者的逃离" class="headerlink" title="P1095 [NOIP2007 普及组] 守望者的逃离"></a>P1095 [NOIP2007 普及组] 守望者的逃离</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1095">P1095 [NOIP2007 普及组] 守望者的逃离 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666839250939.png" alt="1666839250939"></p>
<p><img data-src="/images/typora/1666839261531.png" alt="1666839261531"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> m,s,t,i,dp[<span class="number">300001</span>],cst[<span class="number">10</span>]=&#123;<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;m&gt;&gt;s&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=t;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(m&gt;=<span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			m-=<span class="number">10</span>;</span><br><span class="line">			dp[i]=dp[i<span class="number">-1</span>]+<span class="number">60</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(cst[m]+i&lt;=t&amp;&amp;<span class="built_in">min</span>(cst[m]+<span class="number">1</span>,t-i)*<span class="number">17</span>+dp[i<span class="number">-1</span>]&lt;s)</span><br><span class="line">		&#123;</span><br><span class="line">			dp[i]=dp[i<span class="number">-1</span>];</span><br><span class="line">			m+=<span class="number">4</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			dp[i]=dp[i<span class="number">-1</span>]+<span class="number">17</span>;</span><br><span class="line">		<span class="keyword">if</span>(dp[i]&gt;=s)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(i&gt;=t&amp;&amp;dp[t]&lt;s)</span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>&lt;&lt;dp[t];</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>&lt;&lt;i;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P1802 5 倍经验日</title>
    <url>/post/81c6df21/</url>
    <content><![CDATA[<h1 id="P1802-5-倍经验日"><a href="#P1802-5-倍经验日" class="headerlink" title="P1802 5 倍经验日"></a>P1802 5 倍经验日</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1802">P1802 5 倍经验日 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666704353026.png" alt="1666704353026"></p>
<p><img data-src="/images/typora/1666704363737.png" alt="1666704363737"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">pal</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> win,los,cos;</span><br><span class="line">&#125;p[<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> n,x;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dp[<span class="number">1001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cin&gt;&gt;p[i].los&gt;&gt;p[i].win&gt;&gt;p[i].cos,dp[<span class="number">0</span>]+=p[i].los,i++);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;dp[i]=dp[<span class="number">0</span>],i++);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=x;j&gt;=p[i].cos;j--)</span><br><span class="line">			dp[j]=<span class="built_in">max</span>(dp[j],dp[j-p[i].cos]-p[i].los+p[i].win);</span><br><span class="line">	cout&lt;&lt;dp[x]*<span class="number">5</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P3397 地毯</title>
    <url>/post/3a5121c3/</url>
    <content><![CDATA[<h1 id="P3397-地毯"><a href="#P3397-地毯" class="headerlink" title="P3397 地毯"></a>P3397 地毯</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P3397">P3397 地毯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666613423976.png" alt="1666613423976"></p>
<p><img data-src="/images/typora/1666613438693.png" alt="1666613438693"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,ans[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x1,y1,x2,y2,i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x1&gt;&gt;y1&gt;&gt;x2&gt;&gt;y2;</span><br><span class="line">		ans[x1][y1]++;</span><br><span class="line">		ans[x2+<span class="number">1</span>][y2+<span class="number">1</span>]++;</span><br><span class="line">		ans[x1][y2+<span class="number">1</span>]--;</span><br><span class="line">		ans[x2+<span class="number">1</span>][y1]--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++,cout&lt;&lt;endl)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i][j]+=ans[i<span class="number">-1</span>][j]+ans[i][j<span class="number">-1</span>]-ans[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">			cout&lt;&lt;ans[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1106 删数问题</title>
    <url>/post/bfa6e44c/</url>
    <content><![CDATA[<h1 id="P1106-删数问题"><a href="#P1106-删数问题" class="headerlink" title="P1106 删数问题"></a>P1106 删数问题</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1106">P1106 删数问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1666536068730.png" alt="1666536068730"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string ans;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;ans&gt;&gt;k;</span><br><span class="line">	string::iterator it;</span><br><span class="line">	<span class="keyword">for</span>(it=ans.<span class="built_in">begin</span>();it!=ans.<span class="built_in">end</span>()&amp;&amp;k&gt;<span class="number">0</span>;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(*it&gt;*(it+<span class="number">1</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			it=ans.<span class="built_in">erase</span>(it);</span><br><span class="line">			k--;</span><br><span class="line">			<span class="keyword">if</span>(it!=ans.<span class="built_in">begin</span>())</span><br><span class="line">				it-=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			it++;</span><br><span class="line">	&#125;</span><br><span class="line">	it=ans.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">while</span>(*it==<span class="string">&#x27;0&#x27;</span>&amp;&amp;ans.<span class="built_in">size</span>()&gt;<span class="number">1</span>)</span><br><span class="line">		it=ans.<span class="built_in">erase</span>(it);</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>202104-2 邻域均值</title>
    <url>/post/950f0727/</url>
    <content><![CDATA[<h1 id="202104-2-邻域均值"><a href="#202104-2-邻域均值" class="headerlink" title="202104-2 邻域均值"></a>202104-2 邻域均值</h1><p><img data-src="/images/typora/1664697486178.png" alt="1664697486178"></p>
<p><img data-src="/images/typora/1664697506205.png" alt="1664697506205"></p>
<p><img data-src="/images/typora/1664697517077.png" alt="1664697517077"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,l,r,t,<span class="built_in">ans</span>(<span class="number">0</span>),sum[<span class="number">601</span>][<span class="number">601</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;l&gt;&gt;r&gt;&gt;t;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;sum[i][j];</span><br><span class="line">			sum[i][j]+=sum[i<span class="number">-1</span>][j]+sum[i][j<span class="number">-1</span>]-sum[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="function"><span class="type">int</span> <span class="title">sx</span><span class="params">(max(i-r,<span class="number">1</span>))</span>,<span class="title">sy</span><span class="params">(max(j-r,<span class="number">1</span>))</span>,<span class="title">ex</span><span class="params">(min(i+r,n))</span>,<span class="title">ey</span><span class="params">(min(j+r,n))</span>,<span class="title">size</span><span class="params">((ex-sx+<span class="number">1</span>)*(ey-sy+<span class="number">1</span>))</span></span>;</span><br><span class="line">			<span class="keyword">if</span>(sum[ex][ey]-sum[ex][sy<span class="number">-1</span>]-sum[sx<span class="number">-1</span>][ey]+sum[sx<span class="number">-1</span>][sy<span class="number">-1</span>]&lt;=t*size)</span><br><span class="line">				ans++;</span><br><span class="line">		&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>202109-2 非零段划分</title>
    <url>/post/977c9d1f/</url>
    <content><![CDATA[<h1 id="202109-2-非零段划分"><a href="#202109-2-非零段划分" class="headerlink" title="202109-2 非零段划分"></a>202109-2 非零段划分</h1><p><img data-src="/images/typora/1664696907681.png" alt="1664696907681"></p>
<p><img data-src="/images/typora/1664696919841.png" alt="1664696919841"></p>
<p><img data-src="/images/typora/1664696927370.png" alt="1664696927370"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,<span class="built_in">bl</span>(<span class="number">0</span>),<span class="built_in">tl</span>(<span class="number">0</span>),<span class="built_in">ans</span>(<span class="number">0</span>),x[<span class="number">500002</span>],b[<span class="number">500002</span>],t[<span class="number">500002</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cin&gt;&gt;x[i++]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x[i]==x[i+<span class="number">1</span>])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">if</span>(x[i]&gt;x[i+<span class="number">1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			t[tl++]=x[i];</span><br><span class="line">			<span class="keyword">while</span>(x[i]&gt;=x[i+<span class="number">1</span>])</span><br><span class="line">				i++;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			b[bl++]=x[i];</span><br><span class="line">			<span class="keyword">while</span>(x[i]&lt;=x[i+<span class="number">1</span>])</span><br><span class="line">				i++;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(b,b+bl);</span><br><span class="line">	<span class="built_in">sort</span>(t,t+tl);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;bl;i++)</span><br><span class="line">		ans=<span class="built_in">max</span>(tl-(<span class="type">int</span>)(<span class="built_in">upper_bound</span>(t,t+tl,b[i])-t<span class="number">-1</span>)-bl+i,ans);</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>202112-2 序列查询新解</title>
    <url>/post/e4dfb6a1/</url>
    <content><![CDATA[<h1 id="202112-2-序列查询新解"><a href="#202112-2-序列查询新解" class="headerlink" title="202112-2 序列查询新解"></a>202112-2 序列查询新解</h1><p><img data-src="/images/typora/1664693848039.png" alt="1664693848039"></p>
<p><img data-src="/images/typora/1664693866662.png" alt="1664693866662"></p>
<p><img data-src="/images/typora/1664693886630.png" alt="1664693886630"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,N,tr,r;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;N;</span><br><span class="line">	tr=r=N/(n+<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> t,i=<span class="number">1</span>;i&lt;=n;i++,r+=tr)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;t;</span><br><span class="line">		ans+=<span class="built_in">abs</span>(r-t);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(r&lt;=N)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=(N-r);</span><br><span class="line">		r+=tr;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>202203-2 出行计划</title>
    <url>/post/e5982e2b/</url>
    <content><![CDATA[<h1 id="202203-2-出行计划"><a href="#202203-2-出行计划" class="headerlink" title="202203-2 出行计划"></a>202203-2 出行计划</h1><p><img data-src="/images/typora/1664687324853.png" alt="1664687324853"></p>
<p><img data-src="/images/typora/1664687332544.png" alt="1664687332544"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,k,ed,ans[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> s,e,i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;s&gt;&gt;e;</span><br><span class="line">		ans[<span class="built_in">max</span>(s-e+<span class="number">1</span>,<span class="number">0</span>)]++;</span><br><span class="line">		ans[s+<span class="number">1</span>]--;</span><br><span class="line">		ed=<span class="built_in">max</span>(end,s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=ed;ans[i]+=ans[i<span class="number">-1</span>],i++);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> q,i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;q;</span><br><span class="line">		<span class="keyword">if</span>(q+k&gt;<span class="number">200000</span>)</span><br><span class="line">			cout&lt;&lt;<span class="number">0</span>&lt;&lt;endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout&lt;&lt;ans[q+k]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>202206-2 寻宝！大冒险！</title>
    <url>/post/7e781e6e/</url>
    <content><![CDATA[<h1 id="202206-2-寻宝！大冒险！"><a href="#202206-2-寻宝！大冒险！" class="headerlink" title="202206-2 寻宝！大冒险！"></a>202206-2 寻宝！大冒险！</h1><p><img data-src="/images/typora/1664686787143.png" alt="1664686787143"></p>
<p><img data-src="/images/typora/1664686801211.png" alt="1664686801211"></p>
<p><img data-src="/images/typora/1664686812090.png" alt="1664686812090"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">map&lt;<span class="type">int</span>,map&lt;<span class="type">int</span>,<span class="type">bool</span>&gt; &gt;tr;</span><br><span class="line"><span class="type">int</span> n,l,s,<span class="built_in">ans</span>(<span class="number">0</span>),tx[<span class="number">1000</span>],ty[<span class="number">1000</span>];</span><br><span class="line"><span class="type">bool</span> mp[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;l&gt;&gt;s;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> x,y,i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">		tx[i]=x;</span><br><span class="line">		ty[i]=y;</span><br><span class="line">		tr[x][y]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=s;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=s;j++)</span><br><span class="line">			cin&gt;&gt;mp[i][j];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">x</span><span class="params">(tx[i])</span>,<span class="title">y</span><span class="params">(ty[i])</span></span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=s;j++)</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;=s;k++)</span><br><span class="line">				<span class="keyword">if</span>(tr[x+j][y+k]!=mp[j][k]||x+j&gt;l||y+k&gt;l)</span><br><span class="line">					<span class="keyword">goto</span> bk;</span><br><span class="line">		ans++;</span><br><span class="line">		bk:</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>202209-2 何以包邮？</title>
    <url>/post/918fa3c7/</url>
    <content><![CDATA[<h1 id="202209-2-何以包邮？"><a href="#202209-2-何以包邮？" class="headerlink" title="202209-2 何以包邮？"></a>202209-2 何以包邮？</h1><p><img data-src="/images/typora/1664684773431.png" alt="1664684773431"></p>
<p><img data-src="/images/typora/1664684810840.png" alt="1664684810840"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,x,bk[<span class="number">31</span>],dp[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;x;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cin&gt;&gt;bk[i++]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">300000</span>;j&gt;=bk[i];j--)</span><br><span class="line">			dp[j]=<span class="built_in">max</span>(dp[j-bk[i]]+bk[i],dp[j]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=x;<span class="number">1</span>;i++)</span><br><span class="line">		<span class="keyword">if</span>(dp[i]&gt;=x)</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;dp[i];</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1044 [NOIP2003 普及组] 栈</title>
    <url>/post/4ef1a322/</url>
    <content><![CDATA[<h1 id="P1044-NOIP2003-普及组-栈"><a href="#P1044-NOIP2003-普及组-栈" class="headerlink" title="P1044 [NOIP2003 普及组]栈"></a>P1044 [NOIP2003 普及组]栈</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1044">P1044 [NOIP2003 普及组]栈 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1664677200186.png" alt="1664677200186"></p>
<p><img data-src="/images/typora/1664677218875.png" alt="1664677218875"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,ans[<span class="number">19</span>][<span class="number">19</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	ans[n][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;<span class="number">0</span>;i--)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(j&gt;<span class="number">0</span>)</span><br><span class="line">				ans[j<span class="number">-1</span>][i-j+<span class="number">1</span>]+=ans[j][i-j];</span><br><span class="line">			<span class="keyword">if</span>(i&gt;j)</span><br><span class="line">				ans[j][i-j<span class="number">-1</span>]+=ans[j][i-j];</span><br><span class="line">		&#125;</span><br><span class="line">	cout&lt;&lt;ans[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>栈</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P1455 搭配购买</title>
    <url>/post/bd293d00/</url>
    <content><![CDATA[<h1 id="P1455-搭配购买"><a href="#P1455-搭配购买" class="headerlink" title="P1455 搭配购买"></a>P1455 搭配购买</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1455">P1455 搭配购买 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1664676892113.png" alt="1664676892113"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">cloud</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> cos,val;</span><br><span class="line">	<span class="built_in">cloud</span>(<span class="type">int</span> cos,<span class="type">int</span> val):<span class="built_in">cos</span>(cos),<span class="built_in">val</span>(val)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;cloud&gt; cld;</span><br><span class="line"><span class="type">int</span> n,m,w,tn,cmb[<span class="number">10001</span>],dp[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==cmb[x])</span><br><span class="line">		<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> cmb[x]=<span class="built_in">find</span>(cmb[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cmb[<span class="built_in">find</span>(cmb[b])]=<span class="built_in">find</span>(cmb[a]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m&gt;&gt;w;</span><br><span class="line">	tn=n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cmb[i]=i,i++);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> cos,val,i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;cos&gt;&gt;val;</span><br><span class="line">		cld.<span class="built_in">push_back</span>(<span class="built_in">cloud</span>(cos,val));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> a,b,i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		<span class="built_in">merge</span>(a,b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> par=<span class="built_in">find</span>(cmb[i]);</span><br><span class="line">		<span class="keyword">if</span>(par!=i)</span><br><span class="line">		&#123;</span><br><span class="line">			cld[par<span class="number">-1</span>].cos+=cld[i<span class="number">-1</span>].cos;</span><br><span class="line">			cld[par<span class="number">-1</span>].val+=cld[i<span class="number">-1</span>].val;</span><br><span class="line">			cld[i<span class="number">-1</span>].cos=cld[i<span class="number">-1</span>].val=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(vector&lt;cloud&gt;::iterator it=cld.<span class="built_in">begin</span>();it!=cld.<span class="built_in">end</span>();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((*it).val==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cld.<span class="built_in">erase</span>(it);</span><br><span class="line">			it--;</span><br><span class="line">			tn--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tn;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=w;j&gt;=cld[i<span class="number">-1</span>].cos;j--)</span><br><span class="line">			dp[j]=<span class="built_in">max</span>(dp[j-cld[i<span class="number">-1</span>].cos]+cld[i<span class="number">-1</span>].val,dp[j]);</span><br><span class="line">	cout&lt;&lt;dp[w];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P8395 [CCC2022 S1] Good Fours and Good Fives</title>
    <url>/post/cbb75737/</url>
    <content><![CDATA[<h1 id="P8395-CCC2022-S1-Good-Fours-and-Good-Fives"><a href="#P8395-CCC2022-S1-Good-Fours-and-Good-Fives" class="headerlink" title="P8395 [CCC2022 S1] Good Fours and Good Fives"></a>P8395 [CCC2022 S1] Good Fours and Good Fives</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P8395">P8395 [CCC2022 S1] Good Fours and Good Fives - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1664676665797.png" alt="1664676665797"></p>
<p><img data-src="/images/typora/1664676674077.png" alt="1664676674077"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,dp[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	dp[<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">4</span>;i&lt;=n;i++)</span><br><span class="line">		dp[i]+=dp[i<span class="number">-4</span>];</span><br><span class="line">	dp[<span class="number">5</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">5</span>;i&lt;=n;i++)</span><br><span class="line">		dp[i]+=dp[i<span class="number">-5</span>];</span><br><span class="line">	cout&lt;&lt;dp[n];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P1216 [USACO1.5]&amp;[IOI1994]数字三角形 Number Triangles</title>
    <url>/post/8bc7b264/</url>
    <content><![CDATA[<h1 id="P1216-USACO1-5-IOI1994-数字三角形-Number-Triangles"><a href="#P1216-USACO1-5-IOI1994-数字三角形-Number-Triangles" class="headerlink" title="P1216 [USACO1.5]&amp;[IOI1994]数字三角形 Number Triangles"></a>P1216 [USACO1.5]&amp;[IOI1994]数字三角形 Number Triangles</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1216">P1216 [USACO1.5]&amp;[IOI1994]数字三角形 Number Triangles - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1664676582804.png" alt="1664676582804"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,dp[<span class="number">1001</span>][<span class="number">1001</span>],<span class="built_in">ans</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cin&gt;&gt;dp[i][j];</span><br><span class="line">			dp[i][j]+=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]);</span><br><span class="line">			<span class="keyword">if</span>(i==n)</span><br><span class="line">				ans=<span class="built_in">max</span>(dp[n][j],ans);</span><br><span class="line">		&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>P1164 小A点菜</title>
    <url>/post/e2ce10ac/</url>
    <content><![CDATA[<h1 id="P1164-小A点菜"><a href="#P1164-小A点菜" class="headerlink" title="P1164 小A点菜"></a>P1164 小A点菜</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1164">P1164 小A点菜 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1664676484715.png" alt="1664676484715"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,ds[<span class="number">1001</span>],dp[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;cin&gt;&gt;ds[i++]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">1</span>;j--)</span><br><span class="line">			<span class="keyword">if</span>(j==ds[i])</span><br><span class="line">				dp[j]++;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(j&gt;ds[i])</span><br><span class="line">				dp[j]+=dp[j-ds[i]];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;dp[m];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>工程化高精度类</title>
    <url>/post/8766dedf/</url>
    <content><![CDATA[<p>基于C++语言的封装类，用于高精度整数和小数（包括负整数和负小数）之间的基本运算和判断大小</p>
<p>主要使用<strong>字符串</strong>实现高精度</p>
<h1 id="高精度类-工程化"><a href="#高精度类-工程化" class="headerlink" title="高精度类(工程化)"></a>高精度类(工程化)</h1><h2 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h2><p>令 c++ 中 string 最大能存储的字符个数为 $x$</p>
<p>则整数大小：$-10^{x}$ ~ $10^{x}$</p>
<h2 id="更新内容"><a href="#更新内容" class="headerlink" title="更新内容"></a>更新内容</h2><table>
<thead>
<tr>
<th align="center">更新内容</th>
<th align="center">时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">创建了高精度类；完成了对四则运算符、输入输出运算符和判断大小运算符的重载；除法输出类型为int，加减乘法输出类型为高精</td>
<td align="center">‎2022‎年‎8‎月‎20‎日‏‎13:31:44</td>
</tr>
<tr>
<td align="center">更新了加减乘法对负数的处理；扩宽了除法的输出范围(unsigned long long)；增加了判断对象是否为整数和负数的函数以及求相反数的函数；添加了成员变量prec描述对象的小数精确位数</td>
<td align="center">2022年8月21日10:37:57</td>
</tr>
<tr>
<td align="center">添加了对高精类数据的初始化(去除数字和负号以外的字符)；添加了高精类的快速幂函数(指数不为高精)</td>
<td align="center">2022年8月21日18:07:10</td>
</tr>
<tr>
<td align="center">更新了加减法和初始化对小数的处理；将成员变量prec改为了ptp(描述对象小数点所在位置)；优化了判断整数和大小的函数方法</td>
<td align="center">2022年8月23日11:34:17</td>
</tr>
<tr>
<td align="center">更新了乘法对小数的处理；添加了高精取模运算；对初始化进行了速度优化</td>
<td align="center">2022年8月24日11:27:13</td>
</tr>
<tr>
<td align="center">修复了初始化和加法的一些bug</td>
<td align="center">2022年8月24日18:51:49</td>
</tr>
<tr>
<td align="center">记以往版本为v1.0，更新版本至v2.0，将数字的表达结合为(负号)+整数位+(小数点)+小数位，数据结构也随即更改为2个string类型digit和decim分别表示整数位和小数位、2个bool类型dec和neg分别表示是否为小数和是否为负数；此次更新暂时只修改了v1.0的加法</td>
<td align="center">2022年11月21日22:17:26</td>
</tr>
<tr>
<td align="center">同步了v1.0的乘法和减法</td>
<td align="center">2022年11月26日11:05:21</td>
</tr>
</tbody></table>
<h2 id="计算速度"><a href="#计算速度" class="headerlink" title="计算速度"></a>计算速度</h2><h3 id="v1-0版本"><a href="#v1-0版本" class="headerlink" title="v1.0版本"></a>v1.0版本</h3><table>
<thead>
<tr>
<th>数据数量</th>
<th>加法</th>
<th>减法</th>
<th>乘法</th>
<th>除法</th>
<th>取模</th>
</tr>
</thead>
<tbody><tr>
<td>1k</td>
<td>7-8ms</td>
<td>8-10ms</td>
<td>2.06s</td>
<td></td>
<td></td>
</tr>
<tr>
<td>5k</td>
<td>37-38ms</td>
<td>44-47ms</td>
<td>60.8s</td>
<td></td>
<td></td>
</tr>
<tr>
<td>1w</td>
<td>71-73ms</td>
<td>87-91ms</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>5w</td>
<td>360-375ms</td>
<td>457-470ms</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>10w</td>
<td>736-747ms</td>
<td>932-945ms</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BigNum</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="type">bool</span> dec, neg;</span><br><span class="line">	string digit, decim;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">number_add</span><span class="params">(string&amp;, string&amp;, <span class="type">int</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">number_sub</span><span class="params">(string&amp;, string&amp;, <span class="type">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">BigNum</span>() &#123; digit = <span class="string">&quot;0&quot;</span>, decim = <span class="string">&quot;&quot;</span>, dec = <span class="literal">false</span>, neg = <span class="literal">false</span>; &#125;</span><br><span class="line">	<span class="built_in">BigNum</span>(<span class="type">const</span> BigNum&amp; num) &#123; digit = num.digit, decim = num.decim, dec = num.dec, neg = num.neg; &#125;</span><br><span class="line">	<span class="built_in">BigNum</span>(<span class="type">const</span> string&amp; digit, string&amp; decim, <span class="type">const</span> <span class="type">bool</span> dec, <span class="type">const</span> <span class="type">bool</span> neg) &#123; <span class="keyword">this</span>-&gt;dec = dec, <span class="keyword">this</span>-&gt;neg = neg, <span class="keyword">this</span>-&gt;digit = digit, <span class="keyword">this</span>-&gt;decim = decim; &#125;</span><br><span class="line">	<span class="built_in">BigNum</span>(<span class="type">const</span> string&amp; s)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(s.size())</span>, <span class="title">i</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">		neg = s[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">		dec = <span class="literal">false</span>;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; size)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (s[i] == <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				dec = <span class="literal">true</span>;</span><br><span class="line">				decim = (i &lt; size ? s.<span class="built_in">substr</span>(i + <span class="number">1</span>, size - <span class="number">1</span>) : <span class="string">&quot;&quot;</span>);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			i++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (neg)</span><br><span class="line">			digit = s.<span class="built_in">substr</span>(<span class="number">1</span>, i - <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			digit = s.<span class="built_in">substr</span>(<span class="number">0</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp;, BigNum&amp;);</span><br><span class="line">	<span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp;, <span class="type">const</span> BigNum&amp;);</span><br><span class="line"></span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> BigNum&amp;);</span><br><span class="line"></span><br><span class="line">	<span class="type">const</span> BigNum <span class="keyword">operator</span>+(<span class="type">const</span> BigNum&amp;);</span><br><span class="line">	<span class="type">const</span> BigNum <span class="keyword">operator</span>-(<span class="type">const</span> BigNum&amp;);</span><br><span class="line">	<span class="type">const</span> BigNum <span class="keyword">operator</span>*(<span class="type">const</span> BigNum&amp;);</span><br><span class="line">	<span class="type">const</span> BigNum <span class="keyword">operator</span>/(<span class="type">const</span> BigNum&amp;);</span><br><span class="line">&#125;;</span><br><span class="line">istream&amp; <span class="keyword">operator</span>&gt;&gt;(istream&amp; is, BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	string temp;</span><br><span class="line">	is &gt;&gt; temp;</span><br><span class="line">	num = <span class="built_in">BigNum</span>(temp);</span><br><span class="line">	<span class="keyword">return</span> is;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	os &lt;&lt; (num.neg ? <span class="string">&quot;-&quot;</span> + num.digit : num.digit) + (num.dec ? <span class="string">&quot;.&quot;</span> + num.decim : num.decim);</span><br><span class="line">	<span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> BigNum::<span class="keyword">operator</span>&lt;(<span class="type">const</span> BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (neg ^ num.neg)</span><br><span class="line">		<span class="keyword">return</span> !neg;</span><br><span class="line">	<span class="keyword">if</span> (digit == num.digit)</span><br><span class="line">		<span class="keyword">return</span> neg ^ (decim &lt; num.decim);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (digit.<span class="built_in">size</span>() == num.digit.<span class="built_in">size</span>())</span><br><span class="line">			<span class="keyword">return</span> neg ^ (digit &lt; num.digit);</span><br><span class="line">		<span class="keyword">return</span> neg ^ (digit.<span class="built_in">size</span>() &lt; num.digit.<span class="built_in">size</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BigNum::number_add</span><span class="params">(string&amp; ans, string&amp; plus, <span class="type">int</span> extra = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">reverse</span>(plus.<span class="built_in">begin</span>(), plus.<span class="built_in">end</span>());</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">temp</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">ans_size</span><span class="params">(ans.size())</span>, <span class="title">plus_size</span><span class="params">(plus.size())</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; plus_size)</span><br><span class="line">	&#123;</span><br><span class="line">		temp = extra + plus[i] + ans[i] - <span class="number">96</span>;</span><br><span class="line">		extra = temp / <span class="number">10</span>;</span><br><span class="line">		ans[i] = temp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= ans_size)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = extra + plus[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">			extra = temp / <span class="number">10</span>;</span><br><span class="line">			ans += temp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (extra)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; ans_size)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i] += extra % <span class="number">10</span>;</span><br><span class="line">			extra = ans[i] - <span class="string">&#x27;9&#x27;</span>;</span><br><span class="line">			<span class="keyword">if</span> (extra &lt;= <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				ans[i++] -= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (i &gt;= ans_size)</span><br><span class="line">			ans += extra % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> extra;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">BigNum::number_sub</span><span class="params">(string&amp; ans, string&amp; sub, <span class="type">int</span> borrow = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (ans == sub)</span><br><span class="line">	&#123;</span><br><span class="line">		ans = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">reverse</span>(sub.<span class="built_in">begin</span>(), sub.<span class="built_in">end</span>());</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">ans_size</span><span class="params">(ans.size())</span>, <span class="title">sub_size</span><span class="params">(sub.size())</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; sub_size)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[i] -= borrow;</span><br><span class="line">		ans[i] -= sub[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (ans[i] &lt; <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			ans[i] += <span class="number">10</span>, borrow = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			borrow = <span class="number">0</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; ans_size &amp;&amp; borrow)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[i] -= borrow;</span><br><span class="line">		<span class="keyword">if</span> (ans[i] &lt; <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			ans[i] += <span class="number">10</span>, borrow = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			borrow = <span class="number">0</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> borrow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> BigNum BigNum::<span class="keyword">operator</span>+(<span class="type">const</span> BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;neg ^ num.neg)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">BigNum <span class="title">num1</span><span class="params">(*<span class="keyword">this</span>)</span>, <span class="title">num2</span><span class="params">(num)</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (num.neg)</span><br><span class="line">		&#123;</span><br><span class="line">			num2.neg = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">return</span> num1 - num2;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			num1.neg = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">return</span> num2 - num1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">extra</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">dec</span><span class="params">(<span class="keyword">this</span>-&gt;dec || num.dec)</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">ans_digit</span><span class="params">(<span class="keyword">this</span>-&gt;digit)</span>, <span class="title">plus_digit</span><span class="params">(num.digit)</span>, <span class="title">ans_decim</span><span class="params">(<span class="keyword">this</span>-&gt;decim)</span>, <span class="title">plus_decim</span><span class="params">(num.decim)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (dec)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">extra_size</span><span class="params">(ans_decim.size() - plus_decim.size())</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (extra_size &gt; <span class="number">0</span>)</span><br><span class="line">			plus_decim.<span class="built_in">append</span>(extra_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (extra_size &lt; <span class="number">0</span>)</span><br><span class="line">			ans_decim.<span class="built_in">append</span>(-extra_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		extra = <span class="built_in">number_add</span>(ans_decim, plus_decim);</span><br><span class="line">		<span class="keyword">if</span> (extra &gt; <span class="number">0</span>)</span><br><span class="line">			ans_decim.<span class="built_in">erase</span>(ans_decim.<span class="built_in">begin</span>());</span><br><span class="line">		<span class="keyword">for</span> (string::iterator it = ans_decim.<span class="built_in">end</span>(); it != ans_decim.<span class="built_in">begin</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*it == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">				it = ans_decim.<span class="built_in">erase</span>(it);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		dec = ans_decim.<span class="built_in">size</span>() &gt; <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ans_digit.<span class="built_in">size</span>() &lt; plus_digit.<span class="built_in">size</span>())</span><br><span class="line">		<span class="built_in">swap</span>(ans_digit, plus_digit);</span><br><span class="line">	<span class="built_in">number_add</span>(ans_digit, plus_digit, extra);</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">BigNum</span>(ans_digit, ans_decim, dec, <span class="keyword">this</span>-&gt;neg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> BigNum BigNum::<span class="keyword">operator</span>-(<span class="type">const</span> BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">this</span>-&gt;neg ^ num.neg)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function">BigNum <span class="title">num1</span><span class="params">(*<span class="keyword">this</span>)</span>, <span class="title">num2</span><span class="params">(num)</span></span>;</span><br><span class="line">		num2.neg = !num.neg;</span><br><span class="line">		<span class="keyword">return</span> num1 + num2;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">borrow</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">dec</span><span class="params">(<span class="keyword">this</span>-&gt;dec || num.dec)</span>, <span class="title">neg</span><span class="params">(<span class="keyword">this</span>-&gt;neg)</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">ans_digit</span><span class="params">(<span class="keyword">this</span>-&gt;digit)</span>, <span class="title">sub_digit</span><span class="params">(num.digit)</span>, <span class="title">ans_decim</span><span class="params">(<span class="keyword">this</span>-&gt;decim)</span>, <span class="title">sub_decim</span><span class="params">(num.decim)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (ans_digit.<span class="built_in">size</span>() &lt; sub_digit.<span class="built_in">size</span>() || (ans_digit.<span class="built_in">size</span>() == sub_digit.<span class="built_in">size</span>() &amp;&amp; ans_digit &lt; sub_digit))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(ans_digit, sub_digit);</span><br><span class="line">		<span class="built_in">swap</span>(ans_decim, sub_decim);</span><br><span class="line">		neg ^= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dec)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ans_digit == sub_digit)</span><br><span class="line">		&#123;</span><br><span class="line">			neg = ans_decim &lt; sub_decim;</span><br><span class="line">			<span class="keyword">if</span> (neg)</span><br><span class="line">				<span class="built_in">swap</span>(ans_decim, sub_decim);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="type">int</span> <span class="title">extra_size</span><span class="params">(ans_decim.size() - sub_decim.size())</span></span>;</span><br><span class="line">		<span class="keyword">if</span> (extra_size &gt; <span class="number">0</span>)</span><br><span class="line">			sub_decim.<span class="built_in">append</span>(extra_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (extra_size &lt; <span class="number">0</span>)</span><br><span class="line">			ans_decim.<span class="built_in">append</span>(-extra_size, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		borrow = <span class="built_in">number_sub</span>(ans_decim, sub_decim);</span><br><span class="line">		<span class="keyword">for</span> (string::iterator it = ans_decim.<span class="built_in">end</span>() - <span class="number">1</span>; it != ans_decim.<span class="built_in">begin</span>();)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*it == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">				it = ans_decim.<span class="built_in">erase</span>(it);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ans_decim[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; ans_decim.<span class="built_in">size</span>() == <span class="number">1</span>)</span><br><span class="line">			ans_decim = <span class="string">&quot;&quot;</span>, dec = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">number_sub</span>(ans_digit, sub_digit, borrow);</span><br><span class="line">	<span class="keyword">for</span> (string::iterator it = ans_digit.<span class="built_in">begin</span>(); it != ans_digit.<span class="built_in">end</span>() - <span class="number">1</span>;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*it == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			it = ans_digit.<span class="built_in">erase</span>(it);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">BigNum</span>(ans_digit, ans_decim, dec, <span class="keyword">this</span>-&gt;neg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> BigNum BigNum::<span class="keyword">operator</span>*(<span class="type">const</span> BigNum&amp; num)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">bool</span> <span class="title">dec</span><span class="params">(<span class="keyword">this</span>-&gt;dec || num.dec)</span>, <span class="title">neg</span><span class="params">(<span class="keyword">this</span>-&gt;neg != num.neg)</span></span>;</span><br><span class="line">	string ans, <span class="built_in">mul_1</span>(<span class="keyword">this</span>-&gt;digit + <span class="keyword">this</span>-&gt;decim), <span class="built_in">mul_2</span>(num.digit + num.decim);</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">mul_1_size</span><span class="params">(mul_1.size())</span>, <span class="title">mul_2_size</span><span class="params">(mul_2.size())</span></span>;</span><br><span class="line">	<span class="built_in">reverse</span>(mul_1.<span class="built_in">begin</span>(), mul_1.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">reverse</span>(mul_2.<span class="built_in">begin</span>(), mul_2.<span class="built_in">end</span>());</span><br><span class="line">	ans.<span class="built_in">append</span>(mul_1_size + mul_2_size, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; mul_2_size; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; mul_1_size; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i + j] += (mul_1[j] - <span class="string">&#x27;0&#x27;</span>) * (mul_2[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">			ans[i + j + <span class="number">1</span>] += (ans[i + j] / <span class="number">10</span>);</span><br><span class="line">			ans[i + j] %= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> size = ans.<span class="built_in">size</span>(), i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">		ans[i] += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	string::iterator it = ans.<span class="built_in">begin</span>();</span><br><span class="line">	<span class="keyword">while</span> (it != ans.<span class="built_in">end</span>() - <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">if</span> (*it == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			it = ans.<span class="built_in">erase</span>(it);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">decim_index</span><span class="params">(ans.size() - <span class="keyword">this</span>-&gt;decim.size() - num.decim.size())</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">ans_digit</span><span class="params">(ans.substr(<span class="number">0</span>, decim_index))</span>, <span class="title">ans_decim</span><span class="params">((dec ? ans.substr(decim_index, ans.size()) : <span class="string">&quot;&quot;</span>))</span></span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">BigNum</span>(ans_digit, ans_decim, dec, <span class="keyword">this</span>-&gt;neg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	BigNum a, b, c;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	c = a * b;</span><br><span class="line">	cout &lt;&lt; c;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P7399 [COCI2020-2021#5]Po</title>
    <url>/post/a81845d1/</url>
    <content><![CDATA[<h1 id="P7399-COCI2020-2021-5-Po"><a href="#P7399-COCI2020-2021-5-Po" class="headerlink" title="P7399 [COCI2020-2021#5]Po"></a>P7399 [COCI2020-2021#5]Po</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P7399">P7399 [COCI2020-2021#5]Po - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1660960403546.png" alt="1660960403546"></p>
<p><img data-src="/images/typora/1660960414640.png" alt="1660960414640"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, <span class="built_in">ans</span>(<span class="number">0</span>), <span class="built_in">h</span>(<span class="number">0</span>), <span class="built_in">t</span>(<span class="number">1</span>), arr[<span class="number">100000</span>], deq[<span class="number">100000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//加速输入输出</span></span><br><span class="line">	std::ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; cin &gt;&gt; arr[i++]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (h&lt;t &amp;&amp; deq[t - <span class="number">1</span>]&gt;arr[i])</span><br><span class="line">			deq[t--] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (h == t || deq[t - <span class="number">1</span>] != arr[i])</span><br><span class="line">			deq[t++] = arr[i], ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>算法小全</title>
    <url>/post/b9a52fbf/</url>
    <content><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>[TOC]</p>
<h2 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h2><p>时间复杂度：$O(log_2n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickPower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">base</span><span class="params">(a)</span>, <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(x &amp; <span class="number">1</span>)</span><br><span class="line">			ans *= base;</span><br><span class="line">		base *= base;</span><br><span class="line">		x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>时间复杂度：$O(n log_2n) $</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> head, <span class="type">int</span> tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">pivot</span><span class="params">(num[head])</span>, <span class="title">i</span><span class="params">(head)</span>, <span class="title">j</span><span class="params">(tail)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">while</span> (num[j] &gt;= pivot &amp;&amp; i &lt; j)</span><br><span class="line">				--j;</span><br><span class="line">			<span class="built_in">swap</span>(num[i], num[j]);</span><br><span class="line">			<span class="keyword">while</span> (num[i] &lt;= pivot &amp;&amp; i &lt; j)</span><br><span class="line">				++i;</span><br><span class="line">			<span class="built_in">swap</span>(num[i], num[j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">quickSort</span>(num, i + <span class="number">1</span>, tail);</span><br><span class="line">		<span class="built_in">quickSort</span>(num, head, i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>时间复杂度：$O(n^2)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">d</span><span class="params">(size / <span class="number">2</span>)</span>, j, temp</span>;</span><br><span class="line">	<span class="keyword">while</span> (d &gt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = d; i &lt;= size; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = num[i];</span><br><span class="line">			j = i - d;</span><br><span class="line">			<span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (num[j] &gt; temp))</span><br><span class="line">			&#123;</span><br><span class="line">				num[j + d] = num[j];</span><br><span class="line">				j -= d;</span><br><span class="line">			&#125;</span><br><span class="line">			num[j + d] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		d /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>时间复杂度：$O(nlog_2n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (mid - left == <span class="number">1</span> || mid &gt; right)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">arrLen</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">i</span><span class="params">(left)</span>, <span class="title">j</span><span class="params">(mid)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; mid &amp;&amp; j &lt;= right)</span><br><span class="line">		<span class="keyword">if</span> (num[i] == num[j])</span><br><span class="line">			tArr[arrLen++] = num[i++],tArr[arrLen++] = num[j++];</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (num[i] &gt; num[j])</span><br><span class="line">			tArr[arrLen++] = num[j++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tArr[arrLen++] = num[i++];</span><br><span class="line">	<span class="keyword">while</span> (i &lt; mid)</span><br><span class="line">		tArr[arrLen++] = num[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">		tArr[arrLen++] = num[j++];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; arrLen; p++)</span><br><span class="line">		*(num + p + left) = tArr[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &lt; size &amp;&amp; num[i] &gt; num[i + <span class="number">1</span>])</span><br><span class="line">			<span class="built_in">swap</span>(num[i], num[i + <span class="number">1</span>]);</span><br><span class="line">	<span class="type">int</span> length = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (; length &lt; size; length *= <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += length * <span class="number">2</span>)</span><br><span class="line">			<span class="keyword">if</span> (i + <span class="number">2</span> * length &lt; size)</span><br><span class="line">				<span class="built_in">merge</span>(num, i, i + length, i + <span class="number">2</span> * length - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">merge</span>(num, i, i + length, size - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">merge</span>(num, <span class="number">0</span>, length / <span class="number">2</span>, size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>时间复杂度：$O(n log_2n)$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">excHeap</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> i, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> left = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> right = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line">	<span class="type">int</span> largestIndex = i;</span><br><span class="line">	<span class="keyword">if</span> (left &lt; size &amp;&amp; num[left] &gt; num[largestIndex])</span><br><span class="line">		largestIndex = left;</span><br><span class="line">	<span class="keyword">if</span> (right &lt; size &amp;&amp; num[right] &gt; num[largestIndex])</span><br><span class="line">		largestIndex = right;</span><br><span class="line">	<span class="keyword">if</span> (largestIndex != i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(num[i], num[largestIndex]);</span><br><span class="line">		<span class="built_in">excHeap</span>(num, largestIndex, size);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = size;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temp; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = size / <span class="number">2</span> - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">			<span class="built_in">excHeap</span>(num, j, size);</span><br><span class="line">		<span class="built_in">swap</span>(num[<span class="number">0</span>], num[size]);</span><br><span class="line">		size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最大公约数"><a href="#最大公约数" class="headerlink" title="最大公约数"></a>最大公约数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> y ? <span class="built_in">gcd</span>(y, x % y) : x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h2><h3 id="埃氏筛"><a href="#埃氏筛" class="headerlink" title="埃氏筛"></a>埃氏筛</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> com[maxN]; <span class="comment">//表示是否为合数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">end</span><span class="params">(sqrt(maxN))</span></span>;</span><br><span class="line">	com[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt; end;i++)</span><br><span class="line">		<span class="keyword">if</span>(!com[i])</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j = i * <span class="number">2</span>;j &lt; maxN;j += i)</span><br><span class="line">				com[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> pri[maxM], <span class="built_in">cnt</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">bool</span> com[maxN];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sieve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	com[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt; maxN;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(!com[i])</span><br><span class="line">			pri[++cnt] = i;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= cnt &amp;&amp; i * pri[j] &lt; maxN;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			com[i * pri[j]] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i % pri[j] == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="KMP字符串匹配"><a href="#KMP字符串匹配" class="headerlink" title="KMP字符串匹配"></a>KMP字符串匹配</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1551 亲戚（并查集）</title>
    <url>/post/bc200d70/</url>
    <content><![CDATA[<h1 id="P1551-亲戚（并查集）"><a href="#P1551-亲戚（并查集）" class="headerlink" title="P1551 亲戚（并查集）"></a>P1551 亲戚（并查集）</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1551">P1551 亲戚（并查集） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1659584066602.png" alt="1659584066602"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, p, par[<span class="number">5001</span>];</span><br><span class="line"><span class="type">bool</span> ans[<span class="number">5001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> par[x] == x ? x : <span class="built_in">find</span>(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	par[<span class="built_in">find</span>(b)] = <span class="built_in">find</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		par[i] = i;</span><br><span class="line">	<span class="type">int</span> x, y;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		<span class="keyword">if</span> (par[x] != par[y])</span><br><span class="line">			<span class="built_in">merge</span>(x, y);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		par[i] = <span class="built_in">find</span>(par[i]);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">		ans[i] = (par[x] == par[y]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; p; i++)</span><br><span class="line">		cout &lt;&lt; (ans[i] ? <span class="string">&quot;Yes\n&quot;</span> : <span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>P1206 [USACO1.2] 回文平方数</title>
    <url>/post/da63370b/</url>
    <content><![CDATA[<h1 id="P1206-USACO1-2-回文平方数"><a href="#P1206-USACO1-2-回文平方数" class="headerlink" title="P1206 [USACO1.2]回文平方数"></a>P1206 [USACO1.2]回文平方数</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1206">P1206 [USACO1.2]回文平方数 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1659497019144.png" alt="1659497019144"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> num[<span class="number">20</span>];</span><br><span class="line"><span class="function">string <span class="title">ex</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string temp, ans = <span class="string">&quot;&quot;</span>;</span><br><span class="line">	<span class="keyword">while</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">		temp += num[x % n];</span><br><span class="line">		x /= n;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = temp.<span class="built_in">length</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		ans += temp[i];</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">isSym</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>() / <span class="number">2</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (s[i] != s[s.<span class="built_in">length</span>() - i - <span class="number">1</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">if</span> (i &lt; <span class="number">10</span>)</span><br><span class="line">			num[i] = i + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			num[i] = i - <span class="number">10</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">300</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">isSym</span>(<span class="built_in">ex</span>(i * i)))</span><br><span class="line">			cout &lt;&lt; <span class="built_in">ex</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; <span class="built_in">ex</span>(i * i) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>P1308 [NOIP2011 普及组]统计单词数</title>
    <url>/post/b6b3e8d2/</url>
    <content><![CDATA[<h1 id="P1308-NOIP2011-普及组-统计单词数"><a href="#P1308-NOIP2011-普及组-统计单词数" class="headerlink" title="P1308 [NOIP2011 普及组]统计单词数"></a>P1308 [NOIP2011 普及组]统计单词数</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1308">P1308 [NOIP2011 普及组]统计单词数 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1659434688103.png" alt="1659434688103"><br><img data-src="/images/typora/1659434703578.png" alt="1659434703578"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[] word = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] ans = &#123; <span class="number">0</span> , -<span class="number">1</span> &#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">f</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line">        len = s.length();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; len;i++) &#123;</span><br><span class="line">            word[i] = s.charAt(i);</span><br><span class="line">            word[i+len] = other(word[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        s = in.nextLine();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(equal(s.substring(t,i)))&#123;</span><br><span class="line">                    ans[<span class="number">0</span>]++;</span><br><span class="line">                    <span class="keyword">if</span>(f)</span><br><span class="line">                        ans[<span class="number">1</span>] = t;</span><br><span class="line">                    f = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                t = i + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(f)</span><br><span class="line">            System.out.println(-<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(ans[<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + ans[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">char</span> <span class="title function_">other</span><span class="params">(<span class="type">char</span> c)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">char</span>)(c&gt;=<span class="string">&#x27;a&#x27;</span>?c-<span class="number">32</span>:c+<span class="number">32</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equal</span><span class="params">(String s)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.length()!=len)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; s.length();i++)</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) != word[i] &amp;&amp; s.charAt(i) != word[i+len])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>P1009 [NOIP1998 普及组] 阶乘之和</title>
    <url>/post/6fcd48ce/</url>
    <content><![CDATA[<h1 id="P1009-NOIP1998-普及组-阶乘之和"><a href="#P1009-NOIP1998-普及组-阶乘之和" class="headerlink" title="P1009 [NOIP1998 普及组]阶乘之和"></a>P1009 [NOIP1998 普及组]阶乘之和</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1009">P1009 [NOIP1998 普及组]阶乘之和 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1658991177424.png" alt="1658991177424"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, <span class="built_in">d</span>(<span class="number">2</span>), ans[<span class="number">66</span>] = &#123; <span class="number">1</span> &#125;, temp[<span class="number">66</span>] = &#123; <span class="number">1</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mulAdd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">a</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">65</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp[i] = a + temp[i] * d;</span><br><span class="line">		a = temp[i] / <span class="number">10</span>;</span><br><span class="line">		temp[i] %= <span class="number">10</span>;</span><br><span class="line">		ans[i] += temp[i] + b;</span><br><span class="line">		b = ans[i] / <span class="number">10</span>;</span><br><span class="line">		ans[i] %= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (; d &lt;= n; d++)</span><br><span class="line">		<span class="built_in">mulAdd</span>();</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">x</span><span class="params">(<span class="number">65</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (ans[x] == <span class="number">0</span>)</span><br><span class="line">		x--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = x; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		cout &lt;&lt; ans[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P1865 A % B Problem（找质数）</title>
    <url>/post/29f98f7/</url>
    <content><![CDATA[<h1 id="P1865-A-B-Problem（找质数）"><a href="#P1865-A-B-Problem（找质数）" class="headerlink" title="P1865 A % B Problem（找质数）"></a>P1865 A % B Problem（找质数）</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1865">P1865 A % B Problem（找质数） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1658376106903.png" alt="1658376106903"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m, ans[<span class="number">1000001</span>]; <span class="comment">//数组下标前面总共有多少个质数</span></span><br><span class="line"><span class="type">bool</span> com[<span class="number">1000001</span>]; <span class="comment">//数组下标是否为合数</span></span><br><span class="line"><span class="comment">//质数筛，质数的倍数必为合数，依此对质数进行筛选</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">scr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ans[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	com[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans[i] = ans[i - <span class="number">1</span>];</span><br><span class="line">		<span class="keyword">if</span>(!com[i])</span><br><span class="line">		&#123;</span><br><span class="line">			ans[i]++;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">2</span> * i; j &lt;= m; j += i)</span><br><span class="line">				com[j] = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> l, r;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">scr</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		<span class="keyword">if</span> (r &gt; m || l &lt; <span class="number">1</span>)</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Crossing the line&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			cout &lt;&lt; ans[r] - ans[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P1058 [NOIP2008 普及组] 立体图</title>
    <url>/post/c6312ff/</url>
    <content><![CDATA[<h1 id="P1058-NOIP2008-普及组-立体图"><a href="#P1058-NOIP2008-普及组-立体图" class="headerlink" title="P1058 [NOIP2008 普及组]立体图"></a>P1058 [NOIP2008 普及组]立体图</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1058">P1058 [NOIP2008 普及组]立体图 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1658371840449.png" alt="1658371840449"></p>
<p><img data-src="/images/typora/1658371859569.png" alt="1658371859569"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> map[<span class="number">310</span>][<span class="number">410</span>], cube[<span class="number">6</span>][<span class="number">8</span>] = </span><br><span class="line">&#123; <span class="string">&quot;+---+&quot;</span>,</span><br><span class="line"><span class="string">&quot;|   |/&quot;</span>,</span><br><span class="line"><span class="string">&quot;|   | +&quot;</span>,</span><br><span class="line"><span class="string">&quot;+---+ |&quot;</span>,</span><br><span class="line"><span class="string">&quot; /   /|&quot;</span>,</span><br><span class="line"><span class="string">&quot;  +---+&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> x[<span class="number">50</span>][<span class="number">50</span>], m, n, maxL, <span class="built_in">maxH</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> start[<span class="number">6</span>] = &#123; <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span> &#125;, ed[<span class="number">6</span>] = &#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span> &#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">drawCube</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = start[i]; j &lt;= ed[i]; j++)</span><br><span class="line">			map[x + i][y + j] = cube[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; m &gt;&gt; n;</span><br><span class="line">	<span class="type">int</span> h = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cin &gt;&gt; x[i][j];</span><br><span class="line">			maxH = <span class="built_in">max</span>(maxH, x[i][j] * <span class="number">3</span> + (m - i) * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	maxL = <span class="number">4</span> * n + <span class="number">2</span> * m + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; x[i][j]; k++)</span><br><span class="line">				<span class="built_in">drawCube</span>((m - i) * <span class="number">2</span> + <span class="number">3</span> * k - <span class="number">2</span>, j * <span class="number">4</span> - <span class="number">2</span> + (m - i) * <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxH - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; maxL; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (map[i][j] == <span class="literal">NULL</span>)</span><br><span class="line">				cout &lt;&lt; <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cout &lt;&lt; map[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1019 [NOIP2000 提高组]单词接龙</title>
    <url>/post/fea3ade4/</url>
    <content><![CDATA[<h1 id="P1019-NOIP2000-提高组-单词接龙"><a href="#P1019-NOIP2000-提高组-单词接龙" class="headerlink" title="P1019 [NOIP2000 提高组]单词接龙"></a>P1019 [NOIP2000 提高组]单词接龙</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1019">P1019 [NOIP2000 提高组]单词接龙 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1658132970443.png" alt="1658132970443"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String[] str = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] used = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> num , len;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        String s;</span><br><span class="line">        num = in.nextInt();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt;= num;i++)</span><br><span class="line">            str[i] = in.next();</span><br><span class="line">        dfs(str[num],<span class="number">1</span>);</span><br><span class="line">        System.out.println(len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(String curStr,<span class="type">int</span> curLen)</span>&#123;</span><br><span class="line">        len = Math.max(curLen,len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; num;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(used[i] &gt; <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">same</span> <span class="operator">=</span> merge(curStr,str[i]);</span><br><span class="line">            <span class="keyword">if</span>(same &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                used[i]++;</span><br><span class="line">                dfs(str[i],curLen + str[i].length() - same);</span><br><span class="line">                used[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">merge</span><span class="params">(String s1,String s2)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s1.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(s1.charAt(<span class="number">0</span>) == s2.charAt(<span class="number">0</span>))</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">1</span>;l &lt; Math.min(s1.length(),s2.length());l++)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> s2.substring(<span class="number">0</span>,l);</span><br><span class="line">            <span class="keyword">if</span>(s1.substring(s1.length() - l,s1.length()).equals(sub))</span><br><span class="line">                <span class="keyword">return</span> l;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>P1255 数楼梯</title>
    <url>/post/c42c67e6/</url>
    <content><![CDATA[<h1 id="P1255-数楼梯"><a href="#P1255-数楼梯" class="headerlink" title="P1255 数楼梯"></a>P1255 数楼梯</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1255">P1255 数楼梯 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1654610450620.png" alt="1654610450620"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//封装高精度类</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bigNum</span></span><br><span class="line">&#123;</span><br><span class="line">	string num;</span><br><span class="line">	string <span class="keyword">operator</span>+(bigNum&amp; x);</span><br><span class="line">	string <span class="keyword">operator</span>+=(bigNum&amp; x);</span><br><span class="line">&#125;ans[<span class="number">5001</span>];</span><br><span class="line">string bigNum::<span class="keyword">operator</span>+(bigNum&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">i</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">temp</span><span class="params">(<span class="number">0</span>)</span>,<span class="title">ext</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">ans</span><span class="params">(num)</span>,<span class="title">plus</span><span class="params">(x.num)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (ans.<span class="built_in">length</span>() &lt; plus.<span class="built_in">length</span>())</span><br><span class="line">		<span class="built_in">swap</span>(ans, plus);</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(), ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="built_in">reverse</span>(plus.<span class="built_in">begin</span>(), plus.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">for</span> (; i &lt; plus.<span class="built_in">length</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp=ext+plus[i]+ans[i]<span class="number">-96</span>;</span><br><span class="line">		ext=temp/<span class="number">10</span>;</span><br><span class="line">		ans[i]=temp%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		<span class="keyword">if</span> (i&gt;=ans.<span class="built_in">length</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			temp=ext+plus[i]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">			ext=temp/<span class="number">10</span>;</span><br><span class="line">			ans+=temp%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (ext)</span><br><span class="line">		<span class="keyword">if</span>(i&lt;ans.<span class="built_in">size</span>())</span><br><span class="line">			ans[i]+=ext%<span class="number">10</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			ans+=ext%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">string bigNum::<span class="keyword">operator</span>+=(bigNum&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">	num=(*<span class="keyword">this</span>)+x;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	ans[<span class="number">0</span>].num=ans[<span class="number">1</span>].num=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">		ans[i].num+=ans[i<span class="number">-1</span>]+ans[i<span class="number">-2</span>];</span><br><span class="line">	cout&lt;&lt;ans[n].num;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P2841 [高精度]乘法</title>
    <url>/post/6c489f99/</url>
    <content><![CDATA[<h1 id="P1303-高精度-乘法"><a href="#P1303-高精度-乘法" class="headerlink" title="P1303 [高精度]乘法"></a>P1303 [高精度]乘法</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1303">P1303 [高精度]乘法 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1658819890172.png" alt="1658819890172"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">2005</span>], b[<span class="number">2005</span>], ans[<span class="number">4010</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s1, s2;</span><br><span class="line">	cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//和高精加减一样倒序输入</span></span><br><span class="line">    </span><br><span class="line">	a[<span class="number">0</span>] = s1.<span class="built_in">length</span>();</span><br><span class="line">	b[<span class="number">0</span>] = s2.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>] - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		a[a[<span class="number">0</span>] - i] = s1[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b[<span class="number">0</span>] - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		b[b[<span class="number">0</span>] - i] = s2[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*模拟平常使用的手乘法</span></span><br><span class="line"><span class="comment">    	123</span></span><br><span class="line"><span class="comment">    	234</span></span><br><span class="line"><span class="comment">     	492</span></span><br><span class="line"><span class="comment">       369</span></span><br><span class="line"><span class="comment">      246</span></span><br><span class="line"><span class="comment">     ------</span></span><br><span class="line"><span class="comment">      28782			*/</span></span><br><span class="line">    </span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= b[<span class="number">0</span>]; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= a[<span class="number">0</span>]; j++)</span><br><span class="line">			ans[i + j - <span class="number">1</span>] += b[i] * a[j];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= a[<span class="number">0</span>] + b[<span class="number">0</span>]; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ans[k] &gt; <span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans[k + <span class="number">1</span>] += ans[k] / <span class="number">10</span>;</span><br><span class="line">			ans[k] %= <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (ans[a[<span class="number">0</span>] + b[<span class="number">0</span>]] == <span class="number">0</span> &amp;&amp; a[<span class="number">0</span>] + b[<span class="number">0</span>] &gt; <span class="number">1</span>)</span><br><span class="line">		a[<span class="number">0</span>]--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a[<span class="number">0</span>] + b[<span class="number">0</span>]; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		cout &lt;&lt; ans[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P1028 [NOIP2001 普及组] 数的计算</title>
    <url>/post/e2c1f26/</url>
    <content><![CDATA[<h1 id="P1028-NOIP2001-普及组-数的计算"><a href="#P1028-NOIP2001-普及组-数的计算" class="headerlink" title="P1028 [NOIP2001 普及组]数的计算"></a>P1028 [NOIP2001 普及组]数的计算</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1028">P1028 [NOIP2001 普及组]数的计算 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1653789898350.png" alt="1653789898350"></p>
<h2 id="递归式："><a href="#递归式：" class="headerlink" title="递归式："></a>递归式：</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++)</span><br><span class="line">		ans += <span class="built_in">count</span>(i);</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">count</span>(n) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="非递归式"><a href="#非递归式" class="headerlink" title="非递归式"></a>非递归式</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">	&#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i / <span class="number">2</span>; j++)</span><br><span class="line">			num[i] += num[j];</span><br><span class="line">		num[i]++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; num[n] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1002 [NOIP2002 普及组] 过河卒</title>
    <url>/post/c9bcda5/</url>
    <content><![CDATA[<h1 id="P1002-NOIP2002-普及组-过河卒"><a href="#P1002-NOIP2002-普及组-过河卒" class="headerlink" title="P1002 [NOIP2002 普及组]过河卒"></a>P1002 [NOIP2002 普及组]过河卒</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1002">P1002 [NOIP2002 普及组]过河卒 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1653706238305.png" alt="1653706238305"></p>
<p><img data-src="/images/typora/1653706252370.png" alt="1653706252370"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line">LL map[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="type">int</span> sx, sy, hx, hy, fx[] = &#123; <span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span> &#125;, fy[] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">bool</span> horAcess[<span class="number">50</span>][<span class="number">50</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; sx &gt;&gt; sy &gt;&gt; hx &gt;&gt; hy;</span><br><span class="line">	sx++; sy++; hx++; hy++;</span><br><span class="line">	map[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">		horAcess[hx + fx[i]][hy + fy[i]] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= sx; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		map[i][<span class="number">0</span>] = map[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= sy; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (horAcess[i][j] || (i == <span class="number">1</span> &amp;&amp; j == <span class="number">1</span>))</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			map[i][j] = map[i - <span class="number">1</span>][j] + map[i][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; map[sx][sy] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>P1087 [NOIP2004 普及组] FBI 树</title>
    <url>/post/69c73527/</url>
    <content><![CDATA[<h1 id="P1087-NOIP2004-普及组-FBI-树"><a href="#P1087-NOIP2004-普及组-FBI-树" class="headerlink" title="P1087 [NOIP2004 普及组]FBI 树"></a>P1087 [NOIP2004 普及组]FBI 树</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1087">P1087 [NOIP2004 普及组]FBI 树 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1652798305683.png" alt="1652798305683"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">char</span> tree[<span class="number">5100</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qPow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">base</span><span class="params">(a)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (b &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">			ans *= base;</span><br><span class="line">		base *= base;</span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">allSame</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.<span class="built_in">length</span>() == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>() - <span class="number">1</span>; i++)</span><br><span class="line">		<span class="keyword">if</span> (s[i] != s[i + <span class="number">1</span>])</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatFBITree</span><span class="params">(<span class="type">int</span> n, string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s.<span class="built_in">length</span>() &gt; <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		string str1 = s.<span class="built_in">substr</span>(<span class="number">0</span>, s.<span class="built_in">length</span>() / <span class="number">2</span>);</span><br><span class="line">		string str2 = s.<span class="built_in">substr</span>(s.<span class="built_in">length</span>() / <span class="number">2</span>);</span><br><span class="line">		<span class="built_in">creatFBITree</span>(<span class="number">2</span> * n + <span class="number">1</span>, str1);</span><br><span class="line">		<span class="built_in">creatFBITree</span>(<span class="number">2</span> * n + <span class="number">2</span>, str2);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">allSame</span>(s))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			tree[n] = <span class="string">&#x27;I&#x27;</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tree[n] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tree[n] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrder</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2</span> * n + <span class="number">1</span> &lt; <span class="built_in">qPow</span>(<span class="number">2</span>, N + <span class="number">1</span>))</span><br><span class="line">		<span class="built_in">postOrder</span>(<span class="number">2</span> * n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">if</span> (<span class="number">2</span> * n + <span class="number">2</span> &lt; <span class="built_in">qPow</span>(<span class="number">2</span>, N + <span class="number">1</span>))</span><br><span class="line">		<span class="built_in">postOrder</span>(<span class="number">2</span> * n + <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">if</span> (tree[n] != <span class="literal">NULL</span>)</span><br><span class="line">		cout &lt;&lt; tree[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string str;</span><br><span class="line">	cin &gt;&gt; N &gt;&gt; str;</span><br><span class="line">	<span class="built_in">creatFBITree</span>(<span class="number">0</span>, str);</span><br><span class="line">	<span class="built_in">postOrder</span>(<span class="number">0</span>);</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1010 [NOIP1998 普及组] 幂次方</title>
    <url>/post/2fa402f8/</url>
    <content><![CDATA[<h1 id="P1010-NOIP1998-普及组-幂次方"><a href="#P1010-NOIP1998-普及组-幂次方" class="headerlink" title="P1010 [NOIP1998 普及组] 幂次方"></a>P1010 [NOIP1998 普及组] 幂次方</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1010">P1010 [NOIP1998 普及组] 幂次方 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1652794920865.png" alt="1652794920865"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">resolve</span><span class="params">(<span class="type">int</span> base)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (base == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;2(0)&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (base == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;2&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2(&quot;</span>;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; base != <span class="number">0</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (base &amp; <span class="number">1</span>)</span><br><span class="line">			temp.<span class="built_in">push</span>(i);</span><br><span class="line">		base &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!temp.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">resolve</span>(temp.<span class="built_in">top</span>());</span><br><span class="line">		temp.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (!temp.<span class="built_in">empty</span>())</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; n != <span class="number">0</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">			s.<span class="built_in">push</span>(i);</span><br><span class="line">		n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">resolve</span>(s.<span class="built_in">top</span>());</span><br><span class="line">		s.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;+&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>分治</tag>
      </tags>
  </entry>
  <entry>
    <title>P1011 [NOIP1998 提高组] 车站</title>
    <url>/post/4e0ac85/</url>
    <content><![CDATA[<h1 id="P1011-NOIP1998-提高组-车站"><a href="#P1011-NOIP1998-提高组-车站" class="headerlink" title="P1011 [NOIP1998 提高组]车站"></a>P1011 [NOIP1998 提高组]车站</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1011">P1011 [NOIP1998 提高组]车站 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1652794817736.png" alt="1652794817736"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">21</span>], a, n, m, x;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">f</span>(n - <span class="number">1</span>) + <span class="built_in">f</span>(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">	<span class="keyword">switch</span> (x)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>: cout &lt;&lt; a; <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>: cout &lt;&lt; a; <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>: cout &lt;&lt; <span class="number">2</span> * a; <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		ans[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt; n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i - <span class="number">2</span>; j++)</span><br><span class="line">			ans[i] += <span class="built_in">f</span>(j);</span><br><span class="line">	<span class="type">int</span> b = (m - (ans[n - <span class="number">2</span>] + <span class="number">2</span>) * a) / ans[n - <span class="number">1</span>];</span><br><span class="line">	cout &lt;&lt; b * ans[x] + (ans[x - <span class="number">1</span>] + <span class="number">2</span>) * a;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>各类排序算法及其检测</title>
    <url>/post/14f720a2/</url>
    <content><![CDATA[<h1 id="各类排序算法及其检测"><a href="#各类排序算法及其检测" class="headerlink" title="各类排序算法及其检测"></a>各类排序算法及其检测</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1000066</span>], tArr[<span class="number">1000066</span>];</span><br><span class="line"><span class="comment">//快速排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quickSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> head, <span class="type">int</span> tail)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head &gt;= tail)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">pivot</span><span class="params">(num[head])</span>, <span class="title">i</span><span class="params">(head - <span class="number">1</span>)</span>, <span class="title">j</span><span class="params">(tail + <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (num[++i] &lt; pivot);</span><br><span class="line">        <span class="keyword">while</span> (num[--j] &gt; pivot);</span><br><span class="line">        <span class="keyword">if</span> (i &lt; j)</span><br><span class="line">        	<span class="built_in">swap</span>(num[i], num[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">quickSort</span>(num, head, j);</span><br><span class="line">    <span class="built_in">quickSort</span>(num, j + <span class="number">1</span>, tail);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//希尔排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">d</span><span class="params">(size / <span class="number">2</span>)</span>, j, temp</span>;</span><br><span class="line">	<span class="keyword">while</span> (d &gt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = d; i &lt;= size; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = num[i];</span><br><span class="line">			j = i - d;</span><br><span class="line">			<span class="keyword">while</span> ((j &gt;= <span class="number">0</span>) &amp;&amp; (num[j] &gt; temp))</span><br><span class="line">			&#123;</span><br><span class="line">				num[j + d] = num[j];</span><br><span class="line">				j -= d;</span><br><span class="line">			&#125;</span><br><span class="line">			num[j + d] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">		d /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//选择排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">selectionSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">p</span><span class="params">(size)</span>, <span class="title">min</span><span class="params">(num[size])</span>, <span class="title">curMin</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">while</span> (curMin &lt; size)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = curMin; i &lt; size; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (num[i] &lt; min)</span><br><span class="line">			&#123;</span><br><span class="line">				min = num[i];</span><br><span class="line">				p = i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">swap</span>(num[p], num[curMin++]);</span><br><span class="line">		min = num[size];</span><br><span class="line">		p = size;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//归并排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> left, <span class="type">int</span> mid, <span class="type">int</span> right)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (mid - left == <span class="number">1</span> || mid &gt; right)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">arrLen</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">i</span><span class="params">(left)</span>, <span class="title">j</span><span class="params">(mid)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (; i &lt; mid &amp;&amp; j &lt;= right;)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (num[i] == num[j])</span><br><span class="line">		&#123;</span><br><span class="line">			tArr[arrLen++] = num[i++];</span><br><span class="line">			tArr[arrLen++] = num[j++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (num[i] &gt; num[j])</span><br><span class="line">			tArr[arrLen++] = num[j++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			tArr[arrLen++] = num[i++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; mid)</span><br><span class="line">		tArr[arrLen++] = num[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt;= right)</span><br><span class="line">		tArr[arrLen++] = num[j++];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; arrLen; p++)</span><br><span class="line">		*(num + p + left) = tArr[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mergeSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += <span class="number">2</span>)</span><br><span class="line">		<span class="keyword">if</span> (i + <span class="number">1</span> &lt; size &amp;&amp; num[i] &gt; num[i + <span class="number">1</span>])</span><br><span class="line">			<span class="built_in">swap</span>(num[i], num[i + <span class="number">1</span>]);</span><br><span class="line">	<span class="type">int</span> length = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">for</span> (; length &lt; size; length *= <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i += length * <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i + <span class="number">2</span> * length &lt; size)</span><br><span class="line">				<span class="built_in">merge</span>(num, i, i + length, i + <span class="number">2</span> * length - <span class="number">1</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">merge</span>(num, i, i + length, size - <span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">merge</span>(num, <span class="number">0</span>, length / <span class="number">2</span>, size - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">excHeap</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> i, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">left</span><span class="params">((i &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>)</span>, <span class="title">right</span><span class="params">((i &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>)</span>, <span class="title">largestIndex</span><span class="params">(i)</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (left &lt; size &amp;&amp; num[left] &gt; num[largestIndex])</span><br><span class="line">		largestIndex = left;</span><br><span class="line">	<span class="keyword">if</span> (right &lt; size &amp;&amp; num[right] &gt; num[largestIndex])</span><br><span class="line">		largestIndex = right;</span><br><span class="line">	<span class="keyword">if</span> (largestIndex != i)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(num[i], num[largestIndex]);</span><br><span class="line">		<span class="built_in">excHeap</span>(num, largestIndex, size);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">heapSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> temp = size;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; temp; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = (size &gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">			<span class="built_in">excHeap</span>(num, j, size);</span><br><span class="line">		<span class="built_in">swap</span>(num[<span class="number">0</span>], num[size]);</span><br><span class="line">		size--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="type">int</span>* num, <span class="type">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">bool</span> f = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; size - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (num[j] &gt; num[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">swap</span>(num[j], num[j + <span class="number">1</span>]);</span><br><span class="line">				f = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!f)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">screen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择排序方式：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1 : 冒泡排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2 : 快速排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3 : 选择排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;4 : 希尔排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;5 : 堆排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;6 : 归并排序&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	std::ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> arrSize, <span class="built_in">curLength</span>(<span class="number">0</span>), st;</span><br><span class="line">	<span class="comment">//randomData.txt(随机数据) orderData.txt(顺序数据) reverseData.txt(逆序数据)</span></span><br><span class="line">	<span class="function">ifstream <span class="title">file</span><span class="params">(<span class="string">&quot;D:\\Desktop\\TestData\\randomData100w.txt&quot;</span>)</span></span>;</span><br><span class="line">	file &gt;&gt; arrSize;</span><br><span class="line">	<span class="keyword">while</span> (!file.<span class="built_in">eof</span>())</span><br><span class="line">		file &gt;&gt; num[curLength++];</span><br><span class="line">	<span class="built_in">screen</span>();</span><br><span class="line">	cin &gt;&gt; st;</span><br><span class="line">	<span class="type">clock_t</span> start = <span class="built_in">clock</span>();</span><br><span class="line">	<span class="keyword">switch</span> (st)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">bubbleSort</span>(num, arrSize); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">quickSort</span>(num, <span class="number">0</span>, arrSize - <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">selectionSort</span>(num, arrSize - <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="built_in">shellSort</span>(num, arrSize - <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:<span class="built_in">heapSort</span>(num, arrSize - <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:<span class="built_in">mergeSort</span>(num, arrSize); <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">clock_t</span> end = <span class="built_in">clock</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; arrSize; i++)</span><br><span class="line">		cout &lt;&lt; num[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;总耗时：&quot;</span> &lt;&lt; end - start &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>字典生成哈夫曼编码</title>
    <url>/post/d98c846b/</url>
    <content><![CDATA[<p>使用哈夫曼树实现的编码</p>
<p>录入字符数字和其权重，即可生成用于加密解密程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">sz</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">dt</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">wt</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">pt</span><span class="params">(<span class="number">2</span>)</span>, <span class="title">lc</span><span class="params">(<span class="number">3</span>)</span>, <span class="title">rc</span><span class="params">(<span class="number">4</span>)</span>, HT[5][101]</span>;</span><br><span class="line">string HCode[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cout &lt;&lt; (<span class="type">char</span>)HT[dt][i] &lt;&lt; <span class="string">&quot; :&quot;</span> &lt;&lt; HCode[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findMin</span><span class="params">(<span class="type">int</span>* m1, <span class="type">int</span>* m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> min = <span class="number">6666</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (HT[pt][i] == <span class="number">0</span> &amp;&amp; HT[wt][i] &lt;= min)</span><br><span class="line">		&#123;</span><br><span class="line">			*m1 = i;</span><br><span class="line">			min = HT[wt][i];</span><br><span class="line">		&#125;</span><br><span class="line">	min = <span class="number">6666</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (HT[pt][i] == <span class="number">0</span> &amp;&amp; HT[wt][i] &lt;= min &amp;&amp; i != *m1)</span><br><span class="line">		&#123;</span><br><span class="line">			*m2 = i;</span><br><span class="line">			min = HT[wt][i];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (!HT[pt][i])</span><br><span class="line">			n++;</span><br><span class="line">	<span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanCode</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> lf = n;</span><br><span class="line">	<span class="keyword">while</span> (HT[pt][n] != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (HT[lc][HT[pt][n]] == n)</span><br><span class="line">		&#123;</span><br><span class="line">			n = HT[pt][n];</span><br><span class="line">			HCode[lf].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			n = HT[pt][n];</span><br><span class="line">			HCode[lf].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatHuffmanTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m1, m2;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isFull</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">findMin</span>(&amp;m1, &amp;m2);</span><br><span class="line">		HT[wt][sz] = HT[wt][m1] + HT[wt][m2];</span><br><span class="line">		HT[pt][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[lc][sz] = m1;</span><br><span class="line">		HT[rc][sz] = m2;</span><br><span class="line">		HT[pt][m1] = HT[pt][m2] = sz;</span><br><span class="line">		sz++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">HuffmanCode</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanDecode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string code;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请根据字典输入哈夫曼编码：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; code;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;哈夫曼译码为：&quot;</span>;</span><br><span class="line">	<span class="type">int</span> p = sz - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; code.<span class="built_in">length</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (code[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			p = HT[lc][p];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			p = HT[rc][p];</span><br><span class="line">		<span class="keyword">if</span> (HT[lc][p] == <span class="number">0</span> &amp;&amp; HT[rc][p] == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; (<span class="type">char</span>)HT[dt][p];</span><br><span class="line">			p = sz - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toHuffmanCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> code;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请根据输入哈夫曼译码(结尾加上#)：&quot;</span>;</span><br><span class="line">	code = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (code != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (code == (<span class="type">char</span>)HT[dt][i])</span><br><span class="line">				cout &lt;&lt; HCode[i];</span><br><span class="line">		code = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">screen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———1.输出字典———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———2.加    密———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———3.解    密———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———4.结    束———&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;使用 “统计生成字典”程序生成字典\n请输入：&quot;</span>;</span><br><span class="line">	<span class="function"><span class="type">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">	<span class="type">int</span> w;</span><br><span class="line">	cin &gt;&gt; w;</span><br><span class="line">	<span class="keyword">while</span> (w &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		HCode[sz] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		HT[dt][sz] = c;</span><br><span class="line">		HT[pt][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[lc][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[rc][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[wt][sz++] = w;</span><br><span class="line">		cin &gt;&gt; c &gt;&gt; w;</span><br><span class="line">	&#125;</span><br><span class="line">	n = sz;</span><br><span class="line">	<span class="built_in">creatHuffmanTree</span>();</span><br><span class="line">loop:</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">screen</span>();</span><br><span class="line">	<span class="type">int</span> input;</span><br><span class="line">	cin &gt;&gt; input;</span><br><span class="line">	<span class="keyword">switch</span> (input)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">print</span>(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">toHuffmanCode</span>(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">HuffmanDecode</span>(); <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">default</span>:cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> enter = <span class="built_in">getchar</span>();</span><br><span class="line">	enter = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">goto</span> loop;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>统计生成字典</title>
    <url>/post/c4f8c1c8/</url>
    <content><![CDATA[<p>这个程序是为了和之前写的哈夫曼编码配套用（只能输英文 <span class="github-emoji" alias="sob" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8">&#x1f62d;</span>）</p>
<p>主要功能为输入一段文本，对其中的字符、数字和符号进行统计然后输出。懒得搞读文件了 <span class="github-emoji" alias="yum" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8">&#x1f60b;</span></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_BEGIN 32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ASCII_MAX_SIZE 128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line">ll asc[ASCII_MAX_SIZE];</span><br><span class="line">map&lt;<span class="type">char</span>,ll&gt; otr;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> end;</span><br><span class="line">	<span class="function"><span class="type">short</span> <span class="title">out</span><span class="params">(<span class="number">0</span>)</span>,bnd</span>;</span><br><span class="line">	<span class="comment">// 初始化 </span></span><br><span class="line">	<span class="built_in">memset</span>(asc,<span class="number">0</span>,<span class="built_in">sizeof</span>(asc));</span><br><span class="line">	cout&lt;&lt;<span class="string">&quot;输入一个字符和其连续出现的次数作为结束标志：\n&quot;</span>;</span><br><span class="line">	cin&gt;&gt;end&gt;&gt;bnd;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 开始统计 </span></span><br><span class="line">	<span class="function"><span class="type">char</span> <span class="title">c</span><span class="params">(getchar())</span></span>;</span><br><span class="line">	<span class="keyword">while</span>(out&lt;bnd)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 获取字符 </span></span><br><span class="line">		c=<span class="built_in">getchar</span>();</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 判断结束 </span></span><br><span class="line">		<span class="keyword">if</span>(c==end)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(++out&gt;=bnd)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> asc[end]+=out,out=<span class="number">0</span>;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 越界视为其他字符 </span></span><br><span class="line">		<span class="keyword">if</span>(c&gt;=ASCII_MAX_SIZE) otr[c]++;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 统计</span></span><br><span class="line">		asc[c]++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=ASCII_BEGIN;i&lt;ASCII_MAX_SIZE;i++)</span><br><span class="line">		<span class="keyword">if</span>(asc[i]&gt;<span class="number">0</span>)</span><br><span class="line">			cout&lt;&lt;(<span class="type">char</span>)i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;asc[i]&lt;&lt;endl;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(map&lt;<span class="type">char</span>,ll&gt;::iterator it=otr.<span class="built_in">begin</span>();it!=otr.<span class="built_in">end</span>();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="function"><span class="type">char</span> <span class="title">key</span><span class="params">(it-&gt;first)</span></span>;</span><br><span class="line">		cout&lt;&lt;key&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;otr[key]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;end&lt;&lt;<span class="string">&quot; 0\n&quot;</span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼编码</title>
    <url>/post/49558830/</url>
    <content><![CDATA[<h1 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">sz</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">dt</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">wt</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">pt</span><span class="params">(<span class="number">2</span>)</span>, <span class="title">lc</span><span class="params">(<span class="number">3</span>)</span>, <span class="title">rc</span><span class="params">(<span class="number">4</span>)</span>, HT[5][101]</span>;</span><br><span class="line">string HCode[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		cout &lt;&lt; (<span class="type">char</span>)HT[dt][i] &lt;&lt; <span class="string">&quot; :&quot;</span> &lt;&lt; HCode[i] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">findMin</span><span class="params">(<span class="type">int</span>* m1, <span class="type">int</span>* m2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> min = <span class="number">6666</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (HT[pt][i] == <span class="number">0</span> &amp;&amp; HT[wt][i] &lt;= min)</span><br><span class="line">		&#123;</span><br><span class="line">			*m1 = i;</span><br><span class="line">			min = HT[wt][i];</span><br><span class="line">		&#125;</span><br><span class="line">	min = <span class="number">6666</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (HT[pt][i] == <span class="number">0</span> &amp;&amp; HT[wt][i] &lt;= min &amp;&amp; i != *m1)</span><br><span class="line">		&#123;</span><br><span class="line">			*m2 = i;</span><br><span class="line">			min = HT[wt][i];</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isFull</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt; sz; i++)</span><br><span class="line">		<span class="keyword">if</span> (!HT[pt][i])</span><br><span class="line">			n++;</span><br><span class="line">	<span class="keyword">return</span> n == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanCode</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> lf = n;</span><br><span class="line">	<span class="keyword">while</span> (HT[pt][n] != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (HT[lc][HT[pt][n]] == n)</span><br><span class="line">		&#123;</span><br><span class="line">			n = HT[pt][n];</span><br><span class="line">			HCode[lf].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			n = HT[pt][n];</span><br><span class="line">			HCode[lf].<span class="built_in">insert</span>(<span class="number">0</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">creatHuffmanTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> m1, m2;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">isFull</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">findMin</span>(&amp;m1, &amp;m2);</span><br><span class="line">		HT[wt][sz] = HT[wt][m1] + HT[wt][m2];</span><br><span class="line">		HT[pt][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[lc][sz] = m1;</span><br><span class="line">		HT[rc][sz] = m2;</span><br><span class="line">		HT[pt][m1] = HT[pt][m2] = sz;</span><br><span class="line">		sz++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">HuffmanCode</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HuffmanDecode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string code;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请根据字典输入哈夫曼编码：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; code;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;哈夫曼译码为：&quot;</span>;</span><br><span class="line">	<span class="type">int</span> p = sz - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; code.<span class="built_in">length</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (code[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">			p = HT[lc][p];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			p = HT[rc][p];</span><br><span class="line">		<span class="keyword">if</span> (HT[lc][p] == <span class="number">0</span> &amp;&amp; HT[rc][p] == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; (<span class="type">char</span>)HT[dt][p];</span><br><span class="line">			p = sz - <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">toHuffmanCode</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> code;</span><br><span class="line">	<span class="comment">//string code;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请根据输入哈夫曼译码(结尾加上#)：&quot;</span>;</span><br><span class="line">	<span class="comment">//cin &gt;&gt; code;</span></span><br><span class="line">	code = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">while</span> (code != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">if</span> (code == (<span class="type">char</span>)HT[dt][i])</span><br><span class="line">				cout &lt;&lt; HCode[i];</span><br><span class="line">		code = <span class="built_in">getchar</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//for (int i = 0; i &lt; code.length(); i++)</span></span><br><span class="line">	<span class="comment">//	for (int j = 0; j &lt;= n; j++)</span></span><br><span class="line">	<span class="comment">//		if (code[i] == (char)HT[dt][j])</span></span><br><span class="line">	<span class="comment">//			cout &lt;&lt; HCode[j];</span></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">screen</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;**********************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———1.输出字典———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———2.翻译编码———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———3.翻译译码———&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;———4.结束程序———&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;使用字符 权值的方式输入字典并在结尾加上# 1(如有空格请放在第一位)，例如：a 1 # 1&quot;</span> &lt;&lt; endl &lt;&lt; <span class="string">&quot;请输入：&quot;</span>;</span><br><span class="line">	<span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="type">int</span> w;</span><br><span class="line">	cin &gt;&gt; w;</span><br><span class="line">	<span class="keyword">while</span> (c != <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		HCode[sz] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">		HT[dt][sz] = c;</span><br><span class="line">		HT[pt][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[lc][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[rc][sz] = <span class="number">0</span>;</span><br><span class="line">		HT[wt][sz++] = w;</span><br><span class="line">		cin &gt;&gt; c &gt;&gt; w;</span><br><span class="line">	&#125;</span><br><span class="line">	n = sz - <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">creatHuffmanTree</span>();</span><br><span class="line">loop:</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">screen</span>();</span><br><span class="line">	<span class="type">int</span> input;</span><br><span class="line">	cin &gt;&gt; input;</span><br><span class="line">	<span class="keyword">switch</span> (input)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:<span class="built_in">print</span>(); <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:<span class="built_in">HuffmanDecode</span>(); <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:<span class="built_in">toHuffmanCode</span>(); <span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">default</span>:cout &lt;&lt; <span class="string">&quot;输入有误&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">char</span> enter = <span class="built_in">getchar</span>();</span><br><span class="line">	enter = <span class="built_in">getchar</span>();</span><br><span class="line">	<span class="keyword">goto</span> loop;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼树</title>
    <url>/post/b0c16ae4/</url>
    <content><![CDATA[<h1 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">trNode</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> wt;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	trNode* l, * r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span></span><br><span class="line">&#123;</span><br><span class="line">	trNode* root;</span><br><span class="line">&#125;*Nodes[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">findNode</span><span class="params">(<span class="type">int</span>* min1, <span class="type">int</span>* min2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	*min1 = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> empty = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> min = Nodes[<span class="number">0</span>]-&gt;root-&gt;wt;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Nodes[i]-&gt;root-&gt;wt &lt; min)</span><br><span class="line">		&#123;</span><br><span class="line">			*min2 = *min1;</span><br><span class="line">			*min1 = i;</span><br><span class="line">			min = Nodes[i]-&gt;root-&gt;wt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (Nodes[i]-&gt;root-&gt;wt == <span class="number">0</span>)</span><br><span class="line">			empty++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (empty == n - <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">tree <span class="title">createHuffmanTree</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	tree HTree;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">size</span><span class="params">(n)</span>, min1, min2</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">findNode</span>(&amp;min1, &amp;min2))</span><br><span class="line">	&#123;</span><br><span class="line">		trNode* parent = <span class="keyword">new</span> trNode;</span><br><span class="line">		parent-&gt;l = Nodes[min1]-&gt;root;</span><br><span class="line">		parent-&gt;r = Nodes[min2]-&gt;root;</span><br><span class="line">		Nodes[min1]-&gt;root = parent;</span><br><span class="line">		Nodes[min2]-&gt;root-&gt;wt = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> *Nodes[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrder</span><span class="params">(trNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">		cout &lt;&lt; root-&gt;c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;l)</span><br><span class="line">		<span class="built_in">preOrder</span>(root-&gt;l);</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;r)</span><br><span class="line">		<span class="built_in">preOrder</span>(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> wt;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; c &gt;&gt; wt;</span><br><span class="line">		Nodes[i]-&gt;root-&gt;c = c;</span><br><span class="line">		Nodes[i]-&gt;root-&gt;wt = wt;</span><br><span class="line">	&#125;</span><br><span class="line">	tree HuffmanTree = <span class="built_in">createHuffmanTree</span>();</span><br><span class="line">	<span class="built_in">preOrder</span>(HuffmanTree.root);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基本操作</title>
    <url>/post/baa82948/</url>
    <content><![CDATA[<h1 id="二叉树基本操作"><a href="#二叉树基本操作" class="headerlink" title="二叉树基本操作"></a>二叉树基本操作</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">trNode</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	trNode* l;</span><br><span class="line">	trNode* r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bTree</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> height;</span><br><span class="line">	trNode* root = <span class="literal">NULL</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(trNode** root, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		trNode* p = <span class="keyword">new</span> trNode;</span><br><span class="line">		p-&gt;data = data;</span><br><span class="line">		p-&gt;l = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">		*root = p;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= (*root)-&gt;data)</span><br><span class="line">		<span class="built_in">insert</span>(&amp;(*root)-&gt;l, data);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">insert</span>(&amp;(*root)-&gt;r, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">preOrd</span><span class="params">(trNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">		cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;l)</span><br><span class="line">		<span class="built_in">preOrd</span>(root-&gt;l);</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;r)</span><br><span class="line">		<span class="built_in">preOrd</span>(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inOrd</span><span class="params">(trNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;l)</span><br><span class="line">		<span class="built_in">inOrd</span>(root-&gt;l);</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">		cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;r)</span><br><span class="line">		<span class="built_in">inOrd</span>(root-&gt;r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">postOrd</span><span class="params">(trNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;l)</span><br><span class="line">		<span class="built_in">postOrd</span>(root-&gt;l);</span><br><span class="line">	<span class="keyword">if</span> (root-&gt;r)</span><br><span class="line">		<span class="built_in">postOrd</span>(root-&gt;r);</span><br><span class="line">	<span class="keyword">if</span> (root)</span><br><span class="line">		cout &lt;&lt; root-&gt;data &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countNode</span><span class="params">(bTree tr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tr.root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">num</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	queue&lt;trNode*&gt; q;</span><br><span class="line">	trNode* p = tr.root;</span><br><span class="line">	q.<span class="built_in">push</span>(p);</span><br><span class="line">	num++;</span><br><span class="line">	<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;l)</span><br><span class="line">			q.<span class="built_in">push</span>(p-&gt;l);</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;r)</span><br><span class="line">			q.<span class="built_in">push</span>(p-&gt;r);</span><br><span class="line">		p = q.<span class="built_in">front</span>();</span><br><span class="line">		num++;</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">countNode</span><span class="params">(<span class="type">int</span> d, bTree tr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (d &lt; <span class="number">1</span> || d&gt;<span class="number">2</span> || tr.root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (d == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">int</span> <span class="built_in">num1</span>(<span class="number">0</span>);</span><br><span class="line">			queue&lt;trNode*&gt; q;</span><br><span class="line">			trNode* p = tr.root;</span><br><span class="line">			q.<span class="built_in">push</span>(p);</span><br><span class="line">			<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> ((p-&gt;l != <span class="literal">NULL</span>) ^ (p-&gt;r != <span class="literal">NULL</span>))</span><br><span class="line">					num1++;</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;l)</span><br><span class="line">					q.<span class="built_in">push</span>(p-&gt;l);</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;r)</span><br><span class="line">					q.<span class="built_in">push</span>(p-&gt;r);</span><br><span class="line">				p = q.<span class="built_in">front</span>();</span><br><span class="line">				q.<span class="built_in">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> num1 / <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (d == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="function"><span class="type">int</span> <span class="title">num2</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">			queue&lt;trNode*&gt; q;</span><br><span class="line">			trNode* p = tr.root;</span><br><span class="line">			q.<span class="built_in">push</span>(p);</span><br><span class="line">			<span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;l &amp;&amp; p-&gt;r)</span><br><span class="line">					num2++;</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;l)</span><br><span class="line">					q.<span class="built_in">push</span>(p-&gt;l);</span><br><span class="line">				<span class="keyword">if</span> (p-&gt;r)</span><br><span class="line">					q.<span class="built_in">push</span>(p-&gt;r);</span><br><span class="line">				p = q.<span class="built_in">front</span>();</span><br><span class="line">				q.<span class="built_in">pop</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> num2 / <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">maxOrMin</span><span class="params">(<span class="type">bool</span> f, trNode* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">if</span> (f)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (root-&gt;r)</span><br><span class="line">			root = root-&gt;r;</span><br><span class="line">		<span class="keyword">return</span> root-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (root-&gt;l)</span><br><span class="line">			root = root-&gt;l;</span><br><span class="line">		<span class="keyword">return</span> root-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	bTree trA;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入一组用空格间隔的数据，并在结尾加上-1：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; data;</span><br><span class="line">	<span class="keyword">while</span> (data != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">insert</span>(&amp;(trA.root), data);</span><br><span class="line">		cin &gt;&gt; data;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;前序遍历结果：&quot;</span>;</span><br><span class="line">	<span class="built_in">preOrd</span>(trA.root);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;中序遍历结果：&quot;</span>;</span><br><span class="line">	<span class="built_in">inOrd</span>(trA.root);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;后序遍历结果：&quot;</span>;</span><br><span class="line">	<span class="built_in">postOrd</span>(trA.root);</span><br><span class="line">	cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;结点个数为：&quot;</span> &lt;&lt; <span class="built_in">countNode</span>(trA) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;度为1的结点个数为：&quot;</span> &lt;&lt; <span class="built_in">countNode</span>(<span class="number">1</span>, trA) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;度为2的结点个数为：&quot;</span> &lt;&lt; <span class="built_in">countNode</span>(<span class="number">2</span>, trA) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二叉树的最大值为：&quot;</span> &lt;&lt; <span class="built_in">maxOrMin</span>(<span class="number">1</span>, trA.root) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二叉树的最小值为：&quot;</span> &lt;&lt; <span class="built_in">maxOrMin</span>(<span class="number">0</span>, trA.root) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>中序表达式计算</title>
    <url>/post/7c813e30/</url>
    <content><![CDATA[<h1 id="中序表达式计算"><a href="#中序表达式计算" class="headerlink" title="中序表达式计算"></a>中序表达式计算</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">f</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ope;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	node* next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">stack</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">	node* top;</span><br><span class="line">&#125;ope, num;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(stack* s, <span class="type">int</span> data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	(*s).size++;</span><br><span class="line">	node* t = <span class="keyword">new</span> node;</span><br><span class="line">	t-&gt;data = data;</span><br><span class="line">	<span class="keyword">if</span> ((*s).top == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		(*s).top = t;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	t-&gt;next = (*s).top;</span><br><span class="line">	(*s).top = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(stack* s, <span class="type">char</span> ope, <span class="type">int</span> pri)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	(*s).size++;</span><br><span class="line">	node* t = <span class="keyword">new</span> node;</span><br><span class="line">	t-&gt;ope = ope;</span><br><span class="line">	t-&gt;data = pri;</span><br><span class="line">	<span class="keyword">if</span> ((*s).top == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		(*s).top = t;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	t-&gt;next = (*s).top;</span><br><span class="line">	(*s).top = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pop</span><span class="params">(stack* s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	(*s).size--;</span><br><span class="line">	node* temp = (*s).top;</span><br><span class="line">	(*s).top = (*s).top-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isEmpty</span><span class="params">(stack s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (s.size == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickPower</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> exp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>, bs = base;</span><br><span class="line">	<span class="keyword">while</span> (exp &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (exp &amp; <span class="number">1</span>)</span><br><span class="line">			ans *= bs;</span><br><span class="line">		bs *= bs;</span><br><span class="line">		exp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">char</span> ope, <span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">switch</span> (ope)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span><span class="number">&#x27;</span>+<span class="string">&#x27;:return a + b;</span></span><br><span class="line"><span class="string">	case&#x27;</span>-<span class="string">&#x27;:return a - b;</span></span><br><span class="line"><span class="string">	case&#x27;</span>*<span class="string">&#x27;:return a * b;</span></span><br><span class="line"><span class="string">	case&#x27;</span>/<span class="string">&#x27;:return a / b;</span></span><br><span class="line"><span class="string">	case&#x27;</span>%<span class="string">&#x27;:return a % b;</span></span><br><span class="line"><span class="string">	case&#x27;</span>^<span class="string">&#x27;:return quickPower(a, b);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">void preSum()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">	if (f)</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		ans = sum(ope.top-&gt;ope, num.top-&gt;next-&gt;data, num.top-&gt;data);</span></span><br><span class="line"><span class="string">		f = 0;</span></span><br><span class="line"><span class="string">		pop(&amp;num);</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	else</span></span><br><span class="line"><span class="string">		ans = sum(ope.top-&gt;ope, ans, num.top-&gt;data);</span></span><br><span class="line"><span class="string">	pop(&amp;num);</span></span><br><span class="line"><span class="string">	pop(&amp;ope);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">	cout &lt;&lt; &quot;请在中序表达式结尾加上#：&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="string">	char c = getchar();</span></span><br><span class="line"><span class="string">	while (c != &#x27;</span>#<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if (c &gt;= &#x27;</span><span class="number">0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			<span class="built_in">push</span>(&amp;num, c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">switch</span> (c)</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="keyword">case</span><span class="number">&#x27;</span>+<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data &gt;= 1)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data &gt;= 1)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>+<span class="string">&#x27;, 1);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>-<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data &gt;= 1)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data &gt;= 1)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>-<span class="string">&#x27;, 1);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>*<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>*<span class="string">&#x27;, 2);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>/<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>/<span class="string">&#x27;, 2);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>%<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data &gt;= 2)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>%<span class="string">&#x27;, 2);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>^<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				if (isEmpty(ope));</span></span><br><span class="line"><span class="string">				else if (ope.top-&gt;data == 3)</span></span><br><span class="line"><span class="string">					while (ope.top-&gt;data == 3)</span></span><br><span class="line"><span class="string">						preSum();</span></span><br><span class="line"><span class="string">				push(&amp;ope, &#x27;</span>^<span class="string">&#x27;, 3);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			case&#x27;</span>(<span class="string">&#x27;:push(&amp;ope, &#x27;</span>(<span class="string">&#x27;, 0); break;</span></span><br><span class="line"><span class="string">			case&#x27;</span>)<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">			&#123;</span></span><br><span class="line"><span class="string">				while (ope.top-&gt;ope != &#x27;</span>(<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">					preSum();</span></span><br><span class="line"><span class="string">				pop(&amp;ope);</span></span><br><span class="line"><span class="string">				break;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">			&#125;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		c = getchar();</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	while (!isEmpty(ope))</span></span><br><span class="line"><span class="string">		preSum();</span></span><br><span class="line"><span class="string">	cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class="line"><span class="string">	return 0;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树</title>
    <url>/post/7cab1e06/</url>
    <content><![CDATA[<h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">bstNode</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> height;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	bstNode* left;</span><br><span class="line">	bstNode* right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">bstNode* <span class="title">getNewNode</span><span class="params">(<span class="type">int</span> data)</span><span class="comment">//创建新节点</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	bstNode* newNode = <span class="keyword">new</span> <span class="built_in">bstNode</span>();</span><br><span class="line">	newNode-&gt;data = data;</span><br><span class="line">	newNode-&gt;left = newNode-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(bstNode** root, <span class="type">int</span> data)</span><span class="comment">//无需输出地址的插入方式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*root == <span class="literal">NULL</span>)</span><br><span class="line">		*root = <span class="built_in">getNewNode</span>(data);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= (*root)-&gt;data)</span><br><span class="line">		<span class="built_in">insert</span>(&amp;(*root)-&gt;left, data);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">insert</span>(&amp;(*root)-&gt;right, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">bstNode* <span class="title">insert</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span><span class="comment">//返回地址的插入方式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		root = <span class="built_in">getNewNode</span>(data);</span><br><span class="line">		<span class="keyword">return</span> root;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (data &lt;= root-&gt;data)</span><br><span class="line">		root-&gt;left = <span class="built_in">insert</span>(root-&gt;left, data);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		root-&gt;right = <span class="built_in">insert</span>(root-&gt;right, data);</span><br><span class="line">	<span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">giveHeight</span><span class="params">(bstNode** root)</span><span class="comment">//给二叉树所有结点添加高度属性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (*root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		(*root)-&gt;height = <span class="built_in">max</span>(<span class="built_in">giveHeight</span>(&amp;(*root)-&gt;left), <span class="built_in">giveHeight</span>(&amp;(*root)-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> (*root)-&gt;height;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">breadthFirstOutput</span><span class="params">(bstNode* root)</span><span class="comment">//广度优先打印方式</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	queue&lt;bstNode*&gt; trNode;</span><br><span class="line">	trNode.<span class="built_in">push</span>(root);</span><br><span class="line">	<span class="keyword">while</span> (!trNode.<span class="built_in">empty</span>())</span><br><span class="line">	&#123;</span><br><span class="line">		bstNode* ptr = trNode.<span class="built_in">front</span>();</span><br><span class="line">		cout &lt;&lt; ptr-&gt;data &lt;&lt; <span class="string">&quot;  &quot;</span>;</span><br><span class="line">		<span class="keyword">if</span> (ptr-&gt;left)</span><br><span class="line">			trNode.<span class="built_in">push</span>(ptr-&gt;left);</span><br><span class="line">		<span class="keyword">if</span> (ptr-&gt;right)</span><br><span class="line">			trNode.<span class="built_in">push</span>(ptr-&gt;right);</span><br><span class="line">		trNode.<span class="built_in">pop</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">search</span><span class="params">(bstNode* root, <span class="type">int</span> data)</span><span class="comment">//搜索数据</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;data == data)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (root-&gt;data &lt;= data)</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">search</span>(root-&gt;right, data);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">search</span>(root-&gt;left, data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	<span class="function">bstNode* <span class="title">rootA</span><span class="params">(<span class="literal">NULL</span>)</span></span>;</span><br><span class="line">	cin &gt;&gt; data;</span><br><span class="line">	<span class="keyword">while</span> (data != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">insert</span>(&amp;rootA, data);</span><br><span class="line">		cin &gt;&gt; data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">giveHeight</span>(&amp;rootA);</span><br><span class="line">	<span class="built_in">breadthFirstOutput</span>(rootA);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>P1449 后缀表达式</title>
    <url>/post/2470a146/</url>
    <content><![CDATA[<h1 id="P1449-后缀表达式"><a href="#P1449-后缀表达式" class="headerlink" title="P1449 后缀表达式"></a>P1449 后缀表达式</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1449">P1449 后缀表达式 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1647572573204.png" alt="1647572573204"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sizeNum</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">ans</span><span class="params">(<span class="number">0</span>)</span>, num[501]</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">judgeFirst</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">opeNum</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">tempSizeNum</span><span class="params">(sizeNum - <span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">switch</span> (c)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span><span class="number">&#x27;</span>+<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if (judgeFirst)</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = num[tempSizeNum - 1] + num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum -= 2;</span></span><br><span class="line"><span class="string">			judgeFirst = !judgeFirst;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		else</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = ans + num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum--;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		break;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	case&#x27;</span>-<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if (judgeFirst)</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = num[tempSizeNum - 1] - num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum -= 2;</span></span><br><span class="line"><span class="string">			judgeFirst = !judgeFirst;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		else</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = ans - num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum--;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		break;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	case&#x27;</span>*<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if (judgeFirst)</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = num[tempSizeNum - 1] * num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum -= 2;</span></span><br><span class="line"><span class="string">			judgeFirst = !judgeFirst;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		else</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = ans * num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum--;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		break;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	case&#x27;</span>/<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		if (judgeFirst)</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = num[tempSizeNum - 1] / num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum -= 2;</span></span><br><span class="line"><span class="string">			judgeFirst = !judgeFirst;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		else</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			ans = ans / num[tempSizeNum];</span></span><br><span class="line"><span class="string">			sizeNum--;</span></span><br><span class="line"><span class="string">		&#125;</span></span><br><span class="line"><span class="string">		break;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">	&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">int main()</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">	do</span></span><br><span class="line"><span class="string">	&#123;</span></span><br><span class="line"><span class="string">		int x(0);</span></span><br><span class="line"><span class="string">		do</span></span><br><span class="line"><span class="string">		&#123;</span></span><br><span class="line"><span class="string">			c = getchar();</span></span><br><span class="line"><span class="string">			while (c &gt;= &#x27;</span><span class="number">0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				c = <span class="built_in">getchar</span>();</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (c != <span class="string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="string">&#x27; &#x27;</span> &amp;&amp; (c &lt; <span class="string">&#x27;0&#x27;</span> || c&gt;<span class="string">&#x27;9&#x27;</span>))</span><br><span class="line">				<span class="built_in">opeNum</span>(c);</span><br><span class="line">		&#125; <span class="keyword">while</span> (c != <span class="string">&#x27;.&#x27;</span> &amp;&amp; c != <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">		num[sizeNum++] = x;</span><br><span class="line">	&#125; <span class="keyword">while</span> (c != <span class="string">&#x27;@&#x27;</span>);</span><br><span class="line">	cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1328 生活大爆炸版石头剪刀布</title>
    <url>/post/1a263579/</url>
    <content><![CDATA[<h1 id="P1328-生活大爆炸版石头剪刀布"><a href="#P1328-生活大爆炸版石头剪刀布" class="headerlink" title="P1328 生活大爆炸版石头剪刀布"></a>P1328 生活大爆炸版石头剪刀布</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1328">P1328 生活大爆炸版石头剪刀布 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1646905688596.png" alt="1646905688596"></p>
<p><img data-src="/images/typora/1646905703341.png" alt="1646905703341"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, A, B, <span class="built_in">p</span>(<span class="number">0</span>), ab[<span class="number">2</span>][<span class="number">201</span>], scr[<span class="number">2</span>] = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">fill</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A; i &lt; n; i++)</span><br><span class="line">		ab[<span class="number">0</span>][i] = ab[<span class="number">0</span>][i % A];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = B; i &lt; n; i++)</span><br><span class="line">		ab[<span class="number">1</span>][i] = ab[<span class="number">1</span>][i % B];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">count</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ab[<span class="number">0</span>][i] == ab[<span class="number">1</span>][i])</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (ab[p++][i] == <span class="number">0</span> || ab[p--][i] == <span class="number">0</span>)<span class="comment">//利用p指针这样只需要判断一个就够了</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">switch</span> (ab[p][i])</span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:scr[p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>:scr[!p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>:scr[!p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">4</span>:scr[p]++; <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				p = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ab[p++][i] == <span class="number">1</span> || ab[p--][i] == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">switch</span> (ab[p][i])</span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">2</span>:scr[p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>:scr[!p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">4</span>:scr[p]++; <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				p = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ab[p++][i] == <span class="number">2</span> || ab[p--][i] == <span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">switch</span> (ab[p][i])</span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">3</span>:scr[p]++; <span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">4</span>:scr[!p]++; <span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				p = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (ab[p++][i] == <span class="number">3</span> || ab[p--][i] == <span class="number">3</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (ab[p][i] == <span class="number">4</span>)</span><br><span class="line">					scr[!p]++;</span><br><span class="line">				p = <span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; A &gt;&gt; B;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A; i++)</span><br><span class="line">		cin &gt;&gt; ab[<span class="number">0</span>][i];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; B; i++)</span><br><span class="line">		cin &gt;&gt; ab[<span class="number">1</span>][i];</span><br><span class="line">	<span class="built_in">fill</span>();</span><br><span class="line">	<span class="built_in">count</span>();</span><br><span class="line">	cout &lt;&lt; scr[<span class="number">0</span>] &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; scr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>高精度加减法</title>
    <url>/post/136099a0/</url>
    <content><![CDATA[<h1 id="高精度加减法"><a href="#高精度加减法" class="headerlink" title="高精度加减法"></a>高精度加减法</h1><p><strong>数组版：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> numA[<span class="number">105</span>], numB[<span class="number">105</span>], numC[<span class="number">105</span>];</span><br><span class="line">string a, b;</span><br><span class="line"><span class="type">bool</span> ope;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> La, <span class="type">int</span> Lb, <span class="type">int</span> maxl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (numA[La] + numB[Lb] &gt; <span class="number">9</span>) maxl++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxl; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (numA[i] + numB[i] &gt; <span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			numA[i + <span class="number">1</span>]++;</span><br><span class="line">			numC[i] = numA[i] + numB[i] - <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> numC[i] = numA[i] + numB[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxl; i &gt; <span class="number">0</span>; i--) cout &lt;&lt; numC[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">min</span><span class="params">(<span class="type">int</span> La, <span class="type">int</span> Lb, <span class="type">int</span> maxl)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((b &gt; a &amp;&amp; Lb == La) || Lb &gt; La)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a, b);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxl; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (numA[i] &lt; numB[i])</span><br><span class="line">		&#123;</span><br><span class="line">			numA[i + <span class="number">1</span>]--;</span><br><span class="line">			numA[i] += <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		numC[i] = numA[i] - numB[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!numC[maxl]) maxl--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxl; i &gt; <span class="number">0</span>; i--) cout &lt;&lt; numC[i];</span><br><span class="line">	<span class="keyword">if</span> (maxl &lt; <span class="number">1</span>) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入长整数A：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入长整数B：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; b;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">La</span><span class="params">(a.length())</span>, <span class="title">Lb</span><span class="params">(b.length())</span>, <span class="title">maxl</span><span class="params">(La &gt; Lb ? La : Lb)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">length</span>(); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		numA[i] = a[a.<span class="built_in">length</span>() - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">length</span>(); i &gt; <span class="number">0</span>; i--)</span><br><span class="line">		numB[i] = b[b.<span class="built_in">length</span>() - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;加法输入1，减法输入0&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; ope;</span><br><span class="line">	<span class="keyword">if</span> (ope)</span><br><span class="line">		<span class="built_in">add</span>(La, Lb, maxl);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">min</span>(La, Lb, maxl);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>链表版：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P1145 约瑟夫</title>
    <url>/post/af6b9aff/</url>
    <content><![CDATA[<h1 id="P1145-约瑟夫"><a href="#P1145-约瑟夫" class="headerlink" title="P1145 约瑟夫"></a>P1145 约瑟夫</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1145">P1145 约瑟夫 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1646381337017.png" alt="1646381337017"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> hum[<span class="number">29</span>];</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">test</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">p</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">curNum</span><span class="params">(<span class="number">2</span> * k)</span></span>; <span class="comment">//p为指针，指向指定序号的人</span></span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((p + n - <span class="number">1</span>) % curNum == <span class="number">0</span>) <span class="comment">//当序号为可被整除的数时自动指向最后一个人</span></span><br><span class="line">		&#123;</span><br><span class="line">			p = curNum;</span><br><span class="line">			<span class="keyword">goto</span> jump;</span><br><span class="line">		&#125;</span><br><span class="line">		p += (n - <span class="number">1</span>);</span><br><span class="line">		p %= curNum;</span><br><span class="line">	jump:</span><br><span class="line">		<span class="keyword">if</span> (!hum[p]) <span class="comment">//指向好人时跳出循环</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (hum[p]) <span class="comment">//指向坏人 人数-1</span></span><br><span class="line">			--curNum;</span><br><span class="line">		<span class="keyword">if</span> (curNum == k) <span class="comment">//人数只有k人时跳出循环</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; k + <span class="number">1</span>; i++) <span class="comment">//好人赋值为0</span></span><br><span class="line">		hum[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k + <span class="number">1</span>; i &lt; <span class="number">2</span> * k + <span class="number">1</span>; i++) <span class="comment">//坏人赋值为1方便循环</span></span><br><span class="line">		hum[i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="number">2</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">goto</span> brk;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = k; <span class="number">1</span>; i++) <span class="comment">//暴力求解</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">test</span>(i))</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">brk:</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1618 三连击（升级版）</title>
    <url>/post/dc25c527/</url>
    <content><![CDATA[<h1 id="P1618-三连击（升级版）"><a href="#P1618-三连击（升级版）" class="headerlink" title="P1618 三连击（升级版）"></a>P1618 三连击（升级版）</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1618">P1618 三连击（升级版） - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1645955591095.png" alt="1645955591095"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> A, B, C, a, b, c, <span class="built_in">m</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">judgeRepeat</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">9</span>], <span class="built_in">add</span>(<span class="number">0</span>), <span class="built_in">muti</span>(<span class="number">1</span>);</span><br><span class="line">	arr[<span class="number">0</span>] = A % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">1</span>] = A / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">2</span>] = A / <span class="number">100</span>;</span><br><span class="line">	arr[<span class="number">3</span>] = B % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">4</span>] = B / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">5</span>] = B / <span class="number">100</span>;</span><br><span class="line">	arr[<span class="number">6</span>] = C % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">7</span>] = C / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">	arr[<span class="number">8</span>] = C / <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		add += arr[i];</span><br><span class="line">		muti *= arr[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (add == <span class="number">45</span> &amp;&amp; muti == <span class="number">362880</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">123</span>; i &lt; <span class="number">988</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> ((i / a * a) != i)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		A = i;</span><br><span class="line">		B = i / a * b;</span><br><span class="line">		C = i / a * c;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">judgeRepeat</span>())</span><br><span class="line">		&#123;</span><br><span class="line">			m++;</span><br><span class="line">			cout &lt;&lt; A &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; B &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; C &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span>)</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;No!!!&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>杨辉三角</title>
    <url>/post/4ee864f8/</url>
    <content><![CDATA[<h1 id="杨辉三角"><a href="#杨辉三角" class="headerlink" title="杨辉三角"></a>杨辉三角</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">2</span>][<span class="number">66666</span>]; <span class="comment">//循环使用后两个数组</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">p</span><span class="params">(<span class="number">0</span>)</span></span>; <span class="comment">//跳转两个数组的变量</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">    <span class="comment">// 每行的循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) </span><br><span class="line">	&#123;</span><br><span class="line">        <span class="comment">// 单行的每列的循环</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= i; j++) </span><br><span class="line">		&#123;</span><br><span class="line">            <span class="comment">// 单独判断杨辉三角 1 的情况</span></span><br><span class="line">			<span class="keyword">if</span> (!j <span class="keyword">or</span> !(j - i)) </span><br><span class="line">			&#123;</span><br><span class="line">				a[p][j] = <span class="number">1</span>;</span><br><span class="line">				cout &lt;&lt; a[p][j] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">				<span class="keyword">continue</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			a[p][j] = a[!p][j - <span class="number">1</span>] + a[!p][j];</span><br><span class="line">			cout &lt;&lt; a[p][j] &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		p = !p;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1226 快速幂和取余运算</title>
    <url>/post/f4c5c425/</url>
    <content><![CDATA[<h1 id="P1226-快速幂-取余运算"><a href="#P1226-快速幂-取余运算" class="headerlink" title="P1226 快速幂||取余运算"></a>P1226 快速幂||取余运算</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1226">P1226 快速幂||取余运算 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1640747445474.png" alt="1640747445474"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a, b, p;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">QuickPowerAndMod</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ans</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">base</span><span class="params">(a)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (b &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans *= base;</span><br><span class="line">            ans %= p;</span><br><span class="line">        &#125;</span><br><span class="line">        base *= base;</span><br><span class="line">        base %= p;</span><br><span class="line">        b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; p;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> tb = b;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; <span class="string">&quot;^&quot;</span> &lt;&lt; tb &lt;&lt; <span class="string">&quot; mod &quot;</span> &lt;&lt; p &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; <span class="built_in">QuickPowerAndMod</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="快速幂运算-取余运算原理："><a href="#快速幂运算-取余运算原理：" class="headerlink" title="快速幂运算+取余运算原理："></a>快速幂运算+取余运算原理：</h2><p><img data-src="/images/typora/1640747643297.png" alt="1640747643297"></p>
<p><img data-src="/images/typora/1640747687471.png" alt="1640747687471"></p>
<p><img data-src="/images/typora/1640747703397.png" alt="1640747703397"></p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickPower</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span><span class="comment">//是求a的b次方</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>, base = a;<span class="comment">//ans为答案，base为a^(2^n)</span></span><br><span class="line">	<span class="keyword">while</span>(b &gt; <span class="number">0</span>)<span class="comment">//b是一个变化的二进制数，如果还没有用完</span></span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>(b &amp; <span class="number">1</span>)<span class="comment">//&amp;是位运算，b&amp;1表示b在二进制下最后一位是不是1，如果是：</span></span><br><span class="line">			ans *= base;<span class="comment">//把ans乘上对应的a^(2^n)</span></span><br><span class="line">		</span><br><span class="line">        base *= base;<span class="comment">//base自乘，由a^(2^n)变成a^(2^(n+1))</span></span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;<span class="comment">//位运算，b右移一位，如101变成10（把最右边的1移掉了），10010变成1001。现在b在二进制下最后一位是刚刚的倒数第二位。结合上面b &amp; 1食用更佳</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">quickPower</span><span class="params">(<span class="type">int</span> base, <span class="type">int</span> exp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>, bs = base;</span><br><span class="line">	<span class="keyword">while</span>(exp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="keyword">if</span>(exp &amp; <span class="number">1</span>)</span><br><span class="line">			ans *= bs;</span><br><span class="line">        bs *= bs;</span><br><span class="line">		exp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1125 笨小猴</title>
    <url>/post/981cfbff/</url>
    <content><![CDATA[<h1 id="P1125-笨小猴"><a href="#P1125-笨小猴" class="headerlink" title="P1125 笨小猴"></a>P1125 笨小猴</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1125">P1125 笨小猴 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1640619636786.png" alt="1640619636786"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span>* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">		*(a + i) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPrime</span><span class="params">(<span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">countAndJudge</span><span class="params">(<span class="type">int</span>* a, string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; s.<span class="built_in">length</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*(a + s[i] - <span class="string">&#x27;a&#x27;</span>))++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">max</span><span class="params">(<span class="number">1</span>)</span>, <span class="title">min</span><span class="params">(<span class="number">100</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*(a + i) &gt; max)</span><br><span class="line">			max = *(a + i);</span><br><span class="line">		<span class="keyword">if</span> (min &gt; *(a + i) &amp;&amp; *(a + i) != <span class="number">0</span>)</span><br><span class="line">			min = *(a + i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">isPrime</span>(max - min))</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Lucky Word&quot;</span> &lt;&lt; endl &lt;&lt; max - min;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;No Answer&quot;</span> &lt;&lt; endl &lt;&lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">26</span>];</span><br><span class="line">	<span class="built_in">init</span>(a);</span><br><span class="line">	string s;</span><br><span class="line">	cin &gt;&gt; s;</span><br><span class="line">	<span class="built_in">countAndJudge</span>(a, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>P1100 高低位交换</title>
    <url>/post/143188b/</url>
    <content><![CDATA[<h1 id="P1100-高低位交换"><a href="#P1100-高低位交换" class="headerlink" title="P1100 高低位交换"></a>P1100 高低位交换</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1100">P1100 高低位交换 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1640619582666.png" alt="1640619582666"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">DtoB</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">sum</span><span class="params">(<span class="number">0</span>)</span>, <span class="title">pow</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += pow * (s[<span class="number">31</span> - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		pow *= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">BtoD</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string s = <span class="string">&quot;00000000000000000000000000000000&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s[<span class="number">31</span> - i] = (n % <span class="number">2</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">		n /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="function">string <span class="title">s</span><span class="params">(BtoD(n))</span>, <span class="title">temp</span><span class="params">(<span class="string">&quot;0000000000000000&quot;</span>)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		temp[i] = s[i];</span><br><span class="line">		s[i] = s[i + <span class="number">16</span>];</span><br><span class="line">		s[i + <span class="number">16</span>] = temp[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">DtoB</span>(s) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1079 Vigenère 密码</title>
    <url>/post/d3344199/</url>
    <content><![CDATA[<h1 id="P1079-Vigenere-密码"><a href="#P1079-Vigenere-密码" class="headerlink" title="P1079 Vigenère 密码"></a>P1079 Vigenère 密码</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1079">P1079 Vigenère 密码 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1640526655346.png" alt="1640526655346"></p>
<p><img data-src="/images/typora/1640526685295.png" alt="1640526685295"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ascii</span><span class="params">(<span class="type">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (c &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">		<span class="keyword">return</span> c - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> c - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">crack</span><span class="params">(string k, string C)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">L1</span><span class="params">(k.length())</span>, <span class="title">L2</span><span class="params">(C.length())</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (L1 &gt;= L2)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L2; i ++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">ascii</span>(C[i]) &lt; <span class="built_in">ascii</span>(k[i]))</span><br><span class="line">				C[i] -= (<span class="built_in">ascii</span>(k[i]) - <span class="number">26</span>);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				C[i] -= <span class="built_in">ascii</span>(k[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L2; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &gt;= L1)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">ascii</span>(C[i]) &lt; <span class="built_in">ascii</span>(k[i % L1]))</span><br><span class="line">					C[i] -= (<span class="built_in">ascii</span>(k[i % L1]) - <span class="number">26</span>);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					C[i] -= <span class="built_in">ascii</span>(k[i % L1]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">ascii</span>(C[i]) &lt; <span class="built_in">ascii</span>(k[i]))</span><br><span class="line">					C[i] -= (<span class="built_in">ascii</span>(k[i]) - <span class="number">26</span>);</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					C[i] -= <span class="built_in">ascii</span>(k[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string k, C;</span><br><span class="line">	cin &gt;&gt; k &gt;&gt; C;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">crack</span>(k, C) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1014 Cantor表</title>
    <url>/post/9258a674/</url>
    <content><![CDATA[<h1 id="P1014-Cantor表"><a href="#P1014-Cantor表" class="headerlink" title="P1014 Cantor表"></a>P1014 Cantor表</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1014">P1014 Cantor表 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638953426431.png" alt="1638953426431"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">1</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输出Cantor表第几项：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	<span class="type">int</span> x = N;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (N - i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			N -= i;</span><br><span class="line">			n++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) cout &lt;&lt; n - N + <span class="number">1</span> &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; N &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; N &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; n - N + <span class="number">1</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1320 压缩技术反转</title>
    <url>/post/d89cfadb/</url>
    <content><![CDATA[<h1 id="P1320-压缩技术反转"><a href="#P1320-压缩技术反转" class="headerlink" title="P1320 压缩技术反转"></a>P1320 压缩技术反转</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1320">P1320 压缩技术反转 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638953355933.png" alt="1638953355933"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string x[<span class="number">205</span>];</span><br><span class="line">	<span class="type">int</span> N, <span class="built_in">sum</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">char</span> k = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	cin &gt;&gt; x[<span class="number">0</span>];</span><br><span class="line">	N = (x[<span class="number">0</span>].<span class="built_in">length</span>());</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; N; i++) cin &gt;&gt; x[i];</span><br><span class="line">	cout &lt;&lt; N &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x[i][j] == k) sum++;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				k = x[i][j];</span><br><span class="line">				cout &lt;&lt; sum &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">				sum = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; sum;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1319 压缩技术</title>
    <url>/post/508ae8d2/</url>
    <content><![CDATA[<h1 id="P1319-压缩技术"><a href="#P1319-压缩技术" class="headerlink" title="P1319 压缩技术"></a>P1319 压缩技术</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1319">P1319 压缩技术 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638953254939.png" alt="1638953254939"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> N, x, <span class="built_in">p</span>(<span class="number">0</span>),i;</span><br><span class="line">	<span class="type">bool</span> key=<span class="literal">false</span>;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	<span class="keyword">while</span> (cin &gt;&gt; x)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">1</span>; i &lt;= x; i++) &#123;</span><br><span class="line">			p++;</span><br><span class="line">			cout &lt;&lt; key;</span><br><span class="line">			<span class="keyword">if</span> (p % N == <span class="number">0</span>) cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		key = !key;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P2142 [高精度]减法</title>
    <url>/post/6db529bc/</url>
    <content><![CDATA[<h1 id="P2142-高精度-减法"><a href="#P2142-高精度-减法" class="headerlink" title="P2142 [高精度]减法"></a>P2142 [高精度]减法</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P2142">P2142 [高精度]减法 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638953111641.png" alt="1638953111641"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> A[<span class="number">10100</span>], B[<span class="number">10100</span>], C[<span class="number">10100</span>];</span><br><span class="line">	string a, b;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">La</span><span class="params">(a.length())</span>, <span class="title">Lb</span><span class="params">(b.length())</span>, <span class="title">maxl</span><span class="params">(La &gt; Lb ? La : Lb)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= maxl; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		A[i] = <span class="number">0</span>;</span><br><span class="line">		B[i] = <span class="number">0</span>;</span><br><span class="line">		C[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((b &gt; a &amp;&amp; Lb == La) || Lb &gt; La)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(a, b);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	La = a.<span class="built_in">length</span>();</span><br><span class="line">	Lb = b.<span class="built_in">length</span>();</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = La; i &gt; <span class="number">0</span>; i--) A[i] = a[a.<span class="built_in">length</span>() - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = Lb; i &gt; <span class="number">0</span>; i--) B[i] = b[b.<span class="built_in">length</span>() - i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxl; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (A[i] &lt; B[i])</span><br><span class="line">		&#123;</span><br><span class="line">			A[i + <span class="number">1</span>]--;</span><br><span class="line">			A[i] += <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		C[i] = A[i] - B[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (C[maxl] == <span class="number">0</span>) maxl--;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxl; i &gt; <span class="number">0</span>; i--) cout &lt;&lt; C[i];</span><br><span class="line">	<span class="keyword">if</span> (maxl &lt; <span class="number">1</span>) cout &lt;&lt; <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P1601 [高精度]加法</title>
    <url>/post/d050148d/</url>
    <content><![CDATA[<h1 id="P1601-高精度-加法"><a href="#P1601-高精度-加法" class="headerlink" title="P1601 [高精度]加法"></a>P1601 [高精度]加法</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1601">P1601 [高精度]加法 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638953062733.png" alt="1638953062733"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> a[<span class="number">501</span>], b[<span class="number">501</span>], c[<span class="number">501</span>];</span><br><span class="line">	string A, B;</span><br><span class="line">	cin &gt;&gt; A &gt;&gt; B;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">La</span><span class="params">(A.length())</span>, <span class="title">Lb</span><span class="params">(B.length())</span>, <span class="title">maxl</span><span class="params">(La &gt; Lb ? La : Lb)</span></span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxl + <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = <span class="number">0</span>;</span><br><span class="line">		b[i] = <span class="number">0</span>;</span><br><span class="line">		c[i] = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = La; i &gt; <span class="number">0</span>; i--) a[i] = (A[La - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = Lb; i &gt; <span class="number">0</span>; i--) b[i] = (B[Lb - i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span> (a[La] + b[Lb] &gt; <span class="number">9</span>) maxl++;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= maxl; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (a[i] + b[i] &gt; <span class="number">9</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i + <span class="number">1</span>]++;</span><br><span class="line">			c[i] = a[i] + b[i] - <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> c[i] = a[i] + b[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = maxl; i &gt; <span class="number">0</span>; i--) cout &lt;&lt; c[i];</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title>P1420 最长连号</title>
    <url>/post/d281cb3f/</url>
    <content><![CDATA[<h1 id="P1420-最长连号"><a href="#P1420-最长连号" class="headerlink" title="P1420 最长连号"></a>P1420 最长连号</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1420">P1420 最长连号 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952779951.png" alt="1638952779951"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> x[<span class="number">10000</span>], n, <span class="built_in">s</span>(<span class="number">0</span>), <span class="built_in">m</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> y[<span class="number">10000</span>];</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        cin &gt;&gt; x[i];</span><br><span class="line">        y[i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (n - <span class="number">1</span>); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((x[j + <span class="number">1</span>] - x[j]) == <span class="number">1</span>) y[s]++;</span><br><span class="line">        <span class="keyword">else</span> s++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y[k] &gt; y[k + <span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (y[k] &gt; m) m = y[k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; m;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P7724 远古档案馆</title>
    <url>/post/b0b3ea1b/</url>
    <content><![CDATA[<h1 id="P7724-远古档案馆"><a href="#P7724-远古档案馆" class="headerlink" title="P7724 远古档案馆"></a>P7724 远古档案馆</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P7724">P7724 远古档案馆 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952662476.png" alt="1638952662476"></p>
<p><img data-src="/images/typora/1638952667446.png" alt="1638952667446"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> arr1[<span class="number">2</span>][<span class="number">2</span>],arr2[<span class="number">2</span>][<span class="number">2</span>],T,<span class="built_in">Z</span>(<span class="number">0</span>),<span class="built_in">V</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="type">int</span> a, b;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入格式例如：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1 2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3 0&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数字在1-4间，输入起始状态和最终状态：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; arr1[<span class="number">0</span>][<span class="number">0</span>] &gt;&gt; arr1[<span class="number">0</span>][<span class="number">1</span>] &gt;&gt; arr1[<span class="number">1</span>][<span class="number">0</span>] &gt;&gt; arr1[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	cin &gt;&gt; arr2[<span class="number">0</span>][<span class="number">0</span>] &gt;&gt; arr2[<span class="number">0</span>][<span class="number">1</span>] &gt;&gt; arr2[<span class="number">1</span>][<span class="number">0</span>] &gt;&gt; arr2[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">if</span> (arr1[<span class="number">0</span>][<span class="number">0</span>] == arr2[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; arr1[<span class="number">1</span>][<span class="number">0</span>] == arr2[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; arr1[<span class="number">0</span>][<span class="number">1</span>] == arr2[<span class="number">0</span>][<span class="number">1</span>] &amp;&amp; arr1[<span class="number">1</span>][<span class="number">1</span>] == arr2[<span class="number">1</span>][<span class="number">1</span>]) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (arr1[<span class="number">0</span>][<span class="number">0</span>] != <span class="number">0</span> &amp;&amp; arr1[<span class="number">1</span>][<span class="number">0</span>] != <span class="number">0</span> &amp;&amp; arr1[<span class="number">0</span>][<span class="number">1</span>] != <span class="number">0</span> &amp;&amp; arr1[<span class="number">1</span>][<span class="number">1</span>] != <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (arr1[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">					Z++; </span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (Z == <span class="number">3</span>|| Z == <span class="number">2</span>) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">1</span>; x &lt; <span class="number">13</span>; x++) &#123;</span><br><span class="line">				<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">2</span>; k++) &#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="type">int</span> u = <span class="number">0</span>; u &lt; <span class="number">2</span>; u++) &#123;</span><br><span class="line">						<span class="keyword">if</span> (arr1[k][u] == <span class="number">0</span>) &#123;</span><br><span class="line">							a = k;</span><br><span class="line">							b = u;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">switch</span> (a)</span><br><span class="line">				&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">					<span class="keyword">if</span> (b == <span class="number">1</span>) &#123;</span><br><span class="line">						T = arr1[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">						arr1[<span class="number">1</span>][<span class="number">1</span>] = arr1[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">						arr1[<span class="number">0</span>][<span class="number">1</span>] = T;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						T = arr1[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">						arr1[<span class="number">0</span>][<span class="number">1</span>] = arr1[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">						arr1[<span class="number">0</span>][<span class="number">0</span>] = T;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">					<span class="keyword">if</span> (b == <span class="number">1</span>) &#123;</span><br><span class="line">						T = arr1[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">						arr1[<span class="number">1</span>][<span class="number">0</span>] = arr1[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">						arr1[<span class="number">1</span>][<span class="number">1</span>] = T;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span> &#123;</span><br><span class="line">						T = arr1[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">						arr1[<span class="number">0</span>][<span class="number">0</span>] = arr1[<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">						arr1[<span class="number">1</span>][<span class="number">0</span>] = T;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (arr1[<span class="number">0</span>][<span class="number">0</span>] == arr2[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; arr1[<span class="number">1</span>][<span class="number">0</span>] == arr2[<span class="number">1</span>][<span class="number">0</span>] &amp;&amp; arr1[<span class="number">0</span>][<span class="number">1</span>] == arr2[<span class="number">0</span>][<span class="number">1</span>] &amp;&amp; arr1[<span class="number">1</span>][<span class="number">1</span>] == arr2[<span class="number">1</span>][<span class="number">1</span>]) &#123;</span><br><span class="line">					cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> V++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span> (V == <span class="number">12</span>) cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1152 欢乐的跳</title>
    <url>/post/8efd2bf/</url>
    <content><![CDATA[<h1 id="P1152-欢乐的跳"><a href="#P1152-欢乐的跳" class="headerlink" title="P1152 欢乐的跳"></a>P1152 欢乐的跳</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1152">P1152 欢乐的跳 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952591141.png" alt="1638952591141"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sq</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y = (x &gt; <span class="number">0</span> ? x : -x);</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x[<span class="number">1000</span>],n,<span class="built_in">t</span>(<span class="number">0</span>);</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		cin &gt;&gt; x[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; (n<span class="number">-1</span>); j++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">sq</span>(x[j] - x[j + <span class="number">1</span>]) &lt; <span class="number">1</span> || <span class="built_in">sq</span>(x[j] - x[j + <span class="number">1</span>]) &gt; n - <span class="number">1</span>) &#123;</span><br><span class="line">			t--;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">if</span> ((<span class="built_in">sq</span>(x[j] - x[j + <span class="number">1</span>]) &gt;= <span class="number">1</span> )&amp;&amp; (<span class="built_in">sq</span>(x[j] - x[j + <span class="number">1</span>]) &lt;= (n - <span class="number">1</span>))) t++;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">sq</span>(x[j] - x[j + <span class="number">1</span>]) == <span class="built_in">sq</span>(x[j + <span class="number">1</span>] - x[j + <span class="number">2</span>])) t--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t == (n - <span class="number">1</span>)) cout &lt;&lt; <span class="string">&quot;Jolly&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;Not jolly&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>P1150 Peter的烟</title>
    <url>/post/b655e6fa/</url>
    <content><![CDATA[<h1 id="P1150-Peter的烟"><a href="#P1150-Peter的烟" class="headerlink" title="P1150 Peter的烟"></a>P1150 Peter的烟</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1150">P1150 Peter的烟 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952524171.png" alt="1638952524171"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, k, r, s;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">	r = (n - n % k);</span><br><span class="line">	s = n;</span><br><span class="line">	<span class="keyword">while</span> ((r / k) != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		n = (r / k);</span><br><span class="line">		r = (n + r % k);</span><br><span class="line">		s += n;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; s &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>P1151 子数整数</title>
    <url>/post/6c084817/</url>
    <content><![CDATA[<h1 id="P1151-子数整数"><a href="#P1151-子数整数" class="headerlink" title="P1151 子数整数"></a>P1151 子数整数</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1151">P1151 子数整数 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952473601.png" alt="1638952473601"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s1</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (x / <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s2</span><span class="params">(<span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">	y %= <span class="number">10000</span>;</span><br><span class="line">	y /= <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s3</span><span class="params">(<span class="type">int</span> z)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (z % <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">n</span><span class="params">(<span class="number">10000</span>)</span>,K,<span class="title">t</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line">	cin &gt;&gt; K;</span><br><span class="line">	<span class="keyword">for</span> (n; n &lt;= <span class="number">30000</span>; n++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">s1</span>(n) % K == <span class="number">0</span> &amp;&amp; <span class="built_in">s2</span>(n) % K == <span class="number">0</span> &amp;&amp; <span class="built_in">s3</span>(n) % K == <span class="number">0</span>) cout &lt;&lt; n &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> t++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (t == <span class="number">20001</span>)cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>P1304 哥德巴赫猜想</title>
    <url>/post/4cbcd8e6/</url>
    <content><![CDATA[<h1 id="P1304-哥德巴赫猜想"><a href="#P1304-哥德巴赫猜想" class="headerlink" title="P1304 哥德巴赫猜想"></a>P1304 哥德巴赫猜想</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1304">P1304 哥德巴赫猜想 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638952366908.png" alt="1638952366908"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">z</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> y;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">for</span> (y = <span class="number">2</span>; y &lt; x; y++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (x % y == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (y == x) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x[<span class="number">4999</span>],N,u;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	x[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">	u = ((N - <span class="number">2</span>) / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= u; j ++) &#123;</span><br><span class="line">		x[j] = x[j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt;= u; k++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; x[k]; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="built_in">z</span>(i)) &#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">z</span>(x[k] - i)) &#123;</span><br><span class="line">					cout &lt;&lt; x[k] &lt;&lt; <span class="string">&quot;=&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;+&quot;</span> &lt;&lt; (x[k] - i) &lt;&lt; endl;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>P1317 低洼地</title>
    <url>/post/2de2a554/</url>
    <content><![CDATA[<h1 id="P1317-低洼地"><a href="#P1317-低洼地" class="headerlink" title="P1317 低洼地"></a>P1317 低洼地</h1><blockquote>
<p> <a href="https://www.luogu.com.cn/problem/P1317">P1317 低洼地 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p>
</blockquote>
<p><img data-src="/images/typora/1638949867895.png" alt="1638949867895"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> h, <span class="built_in">t</span>(<span class="number">0</span>), n, <span class="built_in">l</span>(<span class="number">0</span>),<span class="built_in">a</span>(<span class="number">0</span>);</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; h;</span><br><span class="line">		<span class="keyword">if</span> (h &lt; t) l=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (h &gt; t &amp;&amp; l == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a++;</span><br><span class="line">			l = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		t = h;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
